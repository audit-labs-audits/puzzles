(mod (MOD_HASH
      CAT_MOD_HASH
      P2_TREASURY_HASH ; need for approving withdrawal from treasury
      P2_SURPLUS_AUCTION_HASH ; need to be able to hold surplus funds to be auctioned
      STATUTES_STRUCT ; to assert statutes
      LAUNCHER_ID ; to assert uniqueness of launcher_id
      BYC_LOT_AMOUNT ; amount of BYC in a lot to win
      BYC_TAIL_HASH ; hash of BYC tail puzzle that we're giving out
      LAST_BID ; to hold bid data -> (bid_crt_amount bid_coin_parent_id target_puzzle_hash current_timestamp)
      statutes_inner_puzzle_hash
      op_code . op_args)

  (include *standard-cl-23*)
  (include curry.clib)
  (include condition_codes.clib)
  (include sha256tree.clib)
  (include statutes_utils.clib)

  (defconst TREASURY_COIN_ANN_PREFIX 0x24) ; -> '$'


  (defconst START_AUCTION 1)
  (defconst BID 2)
  (defconst COMPLETE 3) ; NOTE: this also melts the coin


   (defun assert_ (items)
    (if (r items)
      (qq (if (unquote (f items)) (unquote (assert_ (r items))) (x (unquote (c 1 (f items))))))
      (f items)
      )
    )

  (defmac assert items (assert_ items))

  (defun assert-treasury-coins-withdrawal (P2_TREASURY_HASH CAT_MOD_HASH BYC_TAIL_HASH STATUTES_STRUCT treasury_maximum statutes_puzzle_hash
                                           treasury_coins my_coin_id lot_amount sum_amount byc_leftover)
    ; treasury_coins -> ((leader_launcher_1 . amount1) (launcher_2 . amount2)...)
    ; sorted in reverse order as we have no have to go backwards in a list
    ; we iterate over them extracting launcher id and previous launcher id to
    ; form a puzzle hash of each treasury coin in a ring. Amount should form a sum
    ; of lot amount needed for this surplus auction
    (if treasury_coins
      (assign
        ; treasury_coin -> (parent_id launcher_id current_amount withdraw_amount)
        (parent_id launcher_id prev_launcher_id current_amount withdraw_amount) (f treasury_coins)
        treasury_coin_id (
          sha256 ; treasury coin id
            parent_id
            (curry_hashes CAT_MOD_HASH
              (sha256tree CAT_MOD_HASH)
              (sha256tree BYC_TAIL_HASH)
              (curry_hashes
                P2_TREASURY_HASH
                (sha256tree P2_TREASURY_HASH)
                (sha256tree CAT_MOD_HASH)
                (sha256tree BYC_TAIL_HASH)
                (sha256tree STATUTES_STRUCT)
                (sha256tree launcher_id) ; taking first of (launcher_id amount) pair
                (sha256tree prev_launcher_id) ; same here ^
              )
            )
            current_amount ; taking second of (launcher_id amount) pair
        )
        (c
          (list ASSERT_COIN_ANNOUNCEMENT
            (sha256
              treasury_coin_id
              TREASURY_COIN_ANN_PREFIX
              my_coin_id
              withdraw_amount
              (- current_amount withdraw_amount)
            )
          )
          (c
            ; we also create a coin announcement for each treasury coin
            (list CREATE_COIN_ANNOUNCEMENT
              (concat
                treasury_coin_id
                withdraw_amount
                (- current_amount withdraw_amount)
              )
            )
            (assert-treasury-coins-withdrawal
              P2_TREASURY_HASH CAT_MOD_HASH BYC_TAIL_HASH STATUTES_STRUCT treasury_maximum statutes_puzzle_hash
              (r treasury_coins)
              my_coin_id
              lot_amount
              (+ sum_amount withdraw_amount)
              (- (+ byc_leftover current_amount) withdraw_amount)
            )
          )
        )
      )
      ; we're withdrawing exactly what lot we require for this surplus auction
      ; and treasury needs to stay above maximum threshold, so to trigger surplus auction
      ; we need maximum + lot_amount
      (assert (= sum_amount lot_amount) (> byc_leftover treasury_maximum)
        (list (assert-statute statutes_puzzle_hash STATUTE_TREASURY_MAXIMUM treasury_maximum)) ; end of recursion
      )
    )
  )


  (assign
    recreate-coin (lambda ((& MOD_HASH CAT_MOD_HASH BYC_TAIL_HASH P2_TREASURY_HASH P2_SURPLUS_AUCTION_HASH STATUTES_STRUCT)
                           launcher_id bid lot_amount amount)
      (list
        CREATE_COIN
        (curry_hashes
          MOD_HASH
          (sha256tree MOD_HASH)
          (sha256tree CAT_MOD_HASH)
          (sha256tree P2_TREASURY_HASH)
          (sha256tree P2_SURPLUS_AUCTION_HASH)
          (sha256tree STATUTES_STRUCT)
          (sha256tree launcher_id)
          (sha256tree lot_amount)
          (sha256tree BYC_TAIL_HASH)
          (sha256tree bid)
        )
        amount
      )
    )
    statutes_puzzle_hash (calculate-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
    (if (= op_code START_AUCTION)
      (assign
        (p2_surplus_action_coin_parent_id lot_amount
        start_time my_coin_id treasury_coins treasury_maximum) op_args
        p2_surplus_puzzle_hash (
          curry_hashes CAT_MOD_HASH
            (sha256tree CAT_MOD_HASH)
            (sha256tree BYC_TAIL_HASH)
            (curry_hashes P2_SURPLUS_AUCTION_HASH
              (sha256tree P2_SURPLUS_AUCTION_HASH)
              (sha256tree CAT_MOD_HASH)
              (sha256tree BYC_TAIL_HASH)
              (sha256tree MOD_HASH)
              (sha256tree my_coin_id)
            )
        )
        p2_surplus_action_coin_id (sha256
            p2_surplus_action_coin_parent_id
            p2_surplus_puzzle_hash
            0 ; initial amount for the coin that holds our lot should be 0
        )
        (assert
          ; can't run if LAST_BID is set
          (not LAST_BID)
          ; we can only run if launcher_id is not set
          ; since we'll be using current coin id as launcher id
          ; to guarantee uniqueness based on the amount we're taking from treasury
          ; ie: there's a limited amount that can be taken from treasury
          ;     and coin_id is unique per spend. Once this coin is filled from treasury
          ;     it can't be filled again, hence can be used as unique event in this coins history
          (not LAUNCHER_ID)
          (c
            ; recreate itself setting the launcher_id, no bid and coin amount is 0
            (a recreate-coin (list my_coin_id () lot_amount 0))
            (c (list ASSERT_MY_AMOUNT 0)
              (c (list ASSERT_MY_COIN_ID my_coin_id)
                (c (assert-statute statutes_puzzle_hash STATUTE_SURPLUS_AUCTION_LOT_AMOUNT lot_amount)
                  ; start_time minus one tx block time should already be in the past
                  (c (list ASSERT_SECONDS_ABSOLUTE (- start_time 55))
                    ; make sure that start_time hasn't happen yet, allow it to be in mempool for 5 tx blocks
                    (c (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ start_time (* 5 55)))
                      ; assert p2_surplus_auction coin received the lot amount
                      (c (list CREATE_COIN_ANNOUNCEMENT (concat p2_surplus_action_coin_id lot_amount p2_surplus_puzzle_hash))
                        (c (list ASSERT_COIN_ANNOUNCEMENT (sha256 p2_surplus_action_coin_id my_coin_id lot_amount p2_surplus_puzzle_hash))
                          (c (list REMARK my_coin_id p2_surplus_action_coin_id p2_surplus_puzzle_hash lot_amount)
                            (assert-treasury-coins-withdrawal
                              P2_TREASURY_HASH
                              CAT_MOD_HASH
                              BYC_TAIL_HASH
                              STATUTES_STRUCT
                              treasury_maximum
                              statutes_puzzle_hash
                              treasury_coins
                              my_coin_id
                              lot_amount ; lot amount of byc offered
                              0 ; withdrawal sum amount
                              0 ; leftover byc amount
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
      (if (= op_code BID)
        (assign
          ; op_args -> (bid_crt_amount target_puzzle_hash timestamp)
          ; FIXME: must be agnostic of what kind of coin surplus auction is wrapping
          (bid_crt_amount target_puzzle_hash current_timestamp my_amount ttl lot_amount) op_args
          (last_target_puzzle_hash last_bid_timestamp) LAST_BID
          (assert
            ; ensure bidder is aware what they bidding for
            (= lot_amount BYC_LOT_AMOUNT)
            ; must be smaller than current bid (keepers are bidding for smallest amount of CRT per BYC lot)
            (> my_amount bid_crt_amount)
            ; TTL for bid hasn't expired yet
            (> (- current_timestamp last_bid_timestamp) ttl)
            (list
              (list ASSERT_MY_AMOUNT my_amount)
              ; return CRT to previous bidder
              (list CREATE_COIN last_target_puzzle_hash my_amount)
              ; recreate with new top bid and new timestamp
              (a
                recreate-coin
                (list
                  LAUNCHER_ID
                  (list target_puzzle_hash current_timestamp)
                  bid_crt_amount
                )
              )
              (assert-statute statutes_puzzle_hash STATUTE_SURPLUS_AUCTION_LOT_AMOUNT lot_amount)
              (assert-statute statutes_puzzle_hash STATUTE_SURPLUS_AUCTION_BID_TTL ttl)
              ; current_time minus one tx block time should already be in the past
              (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp 55))
              ; make sure that current_timestamp hasn't happen yet, allow it to be in mempool for 5 tx blocks
              (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp (* 5 55)))
              ; announcement of a new bid to secure fee coins against it
              (list CREATE_COIN_ANNOUNCEMENT (concat target_puzzle_hash bid_crt_amount))
            )
          )
        )
        (if (= op_code COMPLETE)
          ; we have a winning bid, we're going to melt ourselves and transfer BYC
          ; from p2_surplus_auction coin to the winner
          ; op_args -> (ttl auction_timeout)
          (assign
            (target_puzzle_hash timestamp) LAST_BID
            (ttl current_timestamp my_amount crt_tail_puzzle cat_mod_hash p2_surplus_action_coin_parent_id my_coin_id lot_amount) op_args
            crt_tail_hash (sha256tree crt_tail_puzzle)
            p2_surplus_puzzle_hash (
              curry_hashes
                cat_mod_hash
                (sha256tree cat_mod_hash)
                (curry_hashes
                  P2_SURPLUS_AUCTION_HASH
                  (sha256tree P2_SURPLUS_AUCTION_HASH)
                  (sha256tree MOD_HASH)
                  (sha256tree LAUNCHER_ID)
                )
            )
            my_puzzle_hash (
              curry_hashes
                cat_mod_hash
                (sha256tree cat_mod_hash)
                crt_tail_hash
                (curry_hashes
                  MOD_HASH
                  (sha256tree MOD_HASH)
                  (sha256tree P2_TREASURY_HASH)
                  (sha256tree P2_SURPLUS_AUCTION_HASH)
                  (sha256tree STATUTES_STRUCT)
                  (sha256tree LAUNCHER_ID)
                  (sha256tree BYC_LOT_AMOUNT)
                  (sha256tree LAST_BID)
                )
            )
            p2_surplus_action_coin_id (sha256
                p2_surplus_action_coin_parent_id
                p2_surplus_puzzle_hash
                0 ; initial amount for the coin that holds our lot should be 0
            )
            (assert
              ; ttl should've expired
              (> (- current_timestamp timestamp) ttl)
              (list
                (list ASSERT_MY_AMOUNT my_amount)
                ; no recreate here, we create melting condition
                (list CREATE_COIN -113 crt_tail_puzzle
                  (list
                    (sha256tree crt_tail_puzzle)
                    P2_TREASURY_HASH
                    P2_SURPLUS_AUCTION_HASH
                    STATUTES_STRUCT
                    LAUNCHER_ID
                    BYC_LOT_AMOUNT
                    LAST_BID
                  )
                )
                ; ensure provided crt tail puzzle is correct (we're melting ourselves)
                (list ASSERT_MY_PUZZLEHASH my_puzzle_hash)
                ; remaining mojos got to the winner
                (list CREATE_COIN target_puzzle_hash my_amount)
                (assert-statute statutes_puzzle_hash STATUTE_SURPLUS_AUCTION_BID_TTL ttl)
                ; current_time minus one tx block time should already be in the past
                (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp 55))
                ; make sure that current_timestamp hasn't happen yet, allow it to be in mempool for 5 tx blocks
                (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp (* 5 55)))
                ; assert p2_surplus_auction coin transferred the lot amount to the winner (target_puzzle_hash)
                (list CREATE_COIN_ANNOUNCEMENT (concat LAUNCHER_ID lot_amount target_puzzle_hash))
                (list ASSERT_COIN_ANNOUNCEMENT (sha256 p2_surplus_action_coin_id my_coin_id lot_amount target_puzzle_hash))
              )
            )
          )
          (x "unknown op_code" op_code)
        )
      )
    )
  )
)