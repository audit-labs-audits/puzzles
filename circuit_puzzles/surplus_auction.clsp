(mod (OPERATIONS
      MOD_HASH
      CAT_MOD_HASH
      STATUTES_STRUCT ; to assert statutes
      LAUNCHER_ID ; to assert uniqueness of launcher_id
      CAT_LOT_AMOUNT ; amount of BYC in a lot to win
      CAT_TAIL_HASH ; hash of BYC tail puzzle that we're giving out
      CRT_TAIL_HASH ; hash of CRT tail puzzle that we're giving out
      LAST_BID ; to hold bid data -> (bid_crt_amount bid_coin_parent_id target_puzzle_hash current_timestamp)
      statutes_inner_puzzle_hash
      lineage_proof ; (parent_id launcher_id amount last_bid)
      operation . op_args)

  (include *standard-cl-23*)
  (include condition_codes.clib)
  (include utils.clib)

  (defconst ANN_PREFIX '^')
  ; LATER: filter function identical to the one in recharge_auction.clib (apart from ANN_PREFIX). Reuse code?
  (defun filter-announcements ((@ conditions ( (condition_code . condition_rest) . rest_of_conditions)) filtered_announcements)
    (if conditions
      (if (any (= condition_code CREATE_PUZZLE_ANNOUNCEMENT) (= condition_code CREATE_COIN_ANNOUNCEMENT))
        (filter-announcements
          rest_of_conditions
          (c (f conditions) filtered_announcements)
        )
        (if (any (= condition_code ASSERT_COIN_ANNOUNCEMENT) (= condition_code ASSERT_PUZZLE_ANNOUNCEMENT))
          (filter-announcements
            rest_of_conditions
            (c (f conditions) filtered_announcements)
          )
          ; no other conditions please
          (x )
        )
      )
      filtered_announcements
    )
  )
  (if (contains OPERATIONS (sha256tree operation))
    (a
      operation
      (list
        (list MOD_HASH CAT_MOD_HASH CAT_TAIL_HASH CRT_TAIL_HASH LAST_BID LAUNCHER_ID CAT_LOT_AMOUNT STATUTES_STRUCT)
        statutes_inner_puzzle_hash lineage_proof (filter-announcements (f op_args) ())
        (r op_args)
      )
    )
    (x)
  )
)