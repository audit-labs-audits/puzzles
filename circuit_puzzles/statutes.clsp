(mod (MOD_STATUTES_HASH
      (
        ; puzzle mods that are allowed to withdraw/mint stable-coins or governance token(CRT)
        TREASURY_APPROVAL_MOD_HASHES
        P2_TREASURY_MOD_HASH
        OFFER_MOD_HASH
        P2_SURPLUS_AUCTION_MOD_HASH
      )
      CAT_MOD_HASH
      CRT_TAIL_HASH
      ; statutes are (ORACLE_PRICES . statutes) where ORACLE_PRICES are a list of
      ; ((ORACLE_MOD_HASH STATUTES_STRUCT ATOM_ANNOUNCER) (oracle_launcher_id1 oracle_launcherid2 ...))
      STATUTES
      ; PRICES -> ( (oracle_id price last_updated) ...)
      PRICES
      ; cumulative fee updated since start, updated whenever oracle prices are updated
      PAST_CUMULATIVE_STABILITY_FEE_RATE
      ; cumulative interest rate fee, same schedule as stability fee
      PAST_CUMULATIVE_INTEREST_RATE

      ; solution
      crt_inner_puzzle_hash 
      mutation
     )

  (include *standard-cl-23*)
  (include sha256tree.clib)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)

  (defconstant ONE 1)

  (defconstant CRT_ANN_PREFIX 'G')

  (defun announce-statutes (statutes prefix start_index rest)
    (if statutes
      (c
        (list CREATE_PUZZLE_ANNOUNCEMENT
          (concat STATUTES_ANN_PREFIX
            (sha256tree
              (list prefix start_index (if (= prefix 's') (f (f statutes)) (f statutes)))
            )
          )
        )
        (if (= prefix 's')
          ; add a full statutes when announcing statutes
          (c
            (list CREATE_PUZZLE_ANNOUNCEMENT
              (concat STATUTES_ANN_PREFIX
                (sha256tree
                  (list (concat prefix 'f') start_index (f statutes))
                )
              )
            )
            (announce-statutes (r statutes) prefix (+ start_index 1) rest)
          )
          (announce-statutes (r statutes) prefix (+ start_index 1) rest)
        )
      )
      rest
    )
  )

  (defun-inline create-coin-condition (MOD_STATUTES_HASH TREASURY_APPROVAL_MOD_HASHES
                                          P2_TREASURY_MOD_HASH P2_SURPLUS_AUCTION_MOD_HASH
                                          CAT_MOD_HASH OFFER_MOD_HASH CRT_TAIL_HASH
                                          statutes prices cumulative_stability_fee cumulative_interest_rate)
    (list
      CREATE_COIN
      ; puzzle
      (curry_hashes MOD_STATUTES_HASH
        (sha256 ONE MOD_STATUTES_HASH)
        (sha256tree
          (list
            TREASURY_APPROVAL_MOD_HASHES
            P2_TREASURY_MOD_HASH
            OFFER_MOD_HASH
            P2_SURPLUS_AUCTION_MOD_HASH
          )
        )
        (sha256 ONE CAT_MOD_HASH)
        (sha256 ONE CRT_TAIL_HASH)
        (sha256tree statutes)
        (sha256tree prices)
        (sha256tree cumulative_stability_fee)
        (sha256tree cumulative_interest_rate)
      )
      ; amount, 1 mojo for singletons or any odd number
      ONE
    )
  )


  (defun mutate-list (mutation_index new_value statutes index)
    (if statutes
      (c
        (if (= index mutation_index) new_value (f statutes))
        (mutate-list mutation_index new_value (r statutes) (+ index ONE))
      )
      () ;x "can't mutate") ; no more statutes left and index is same as end of list
    )
  )

  (defconstant PRECISION 10000000000)

  (defun calculate-cumulative-stability-fee-rate
      (past_cumulative_stability_fee
       current_stability_fee
       current_timestamp
       previous_timestamp
      )
    (if (> previous_timestamp current_timestamp)
      past_cumulative_stability_fee
      (calculate-cumulative-stability-fee-rate
        (/ (* past_cumulative_stability_fee current_stability_fee) PRECISION)
        current_stability_fee
        current_timestamp
        ; per minute calculation
        (+ previous_timestamp 60)
      )
    )
  )

  (defun get-list-item-at-index (index a_list counter_index)
    (if a_list
      (if (= counter_index index)
        (f a_list)
        (get-list-item-at-index index (r a_list) (+ counter_index ONE))
      )
      ; fail if you don't find an item
      () ; x "index out of bounds" counter_index index a_list)
    )
  )

  (defun-inline get-crt-puzzle-hash (CAT_MOD_HASH CRT_TAIL_HASH INNER_PUZZLE_HASH)
    (curry_hashes CAT_MOD_HASH
      (sha256 ONE CAT_MOD_HASH)
      (sha256 ONE CRT_TAIL_HASH)
      INNER_PUZZLE_HASH
    )
  )


  (defun filter-ann-conditions (
    (@ ann_conditions
      (
        (@ condition
          (condition_code . condition_body)
        )
        . rest
      )
    ) filtered_announcements)
    (if ann_conditions
      (if
        (any
            (= condition_code CREATE_PUZZLE_ANNOUNCEMENT) (= condition_code CREATE_COIN_ANNOUNCEMENT)
        )
        (if (= (substr (f condition_body) 0 1) STATUTES_ANN_PREFIX)
          ; bad announcement, error
          (x "bad announcement")
          (filter-ann-conditions rest (c condition filtered_announcements))
        )
        (if (any (= condition_code ASSERT_PUZZLE_ANNOUNCEMENT) (= condition_code ASSERT_COIN_ANNOUNCEMENT))
          (filter-ann-conditions rest (c condition filtered_announcements))
          (filter-ann-conditions rest filtered_announcements)
        )
      )
      filtered_announcements
    )
  )

  (defun-inline get-oracle-puzzle-hash (statutes_struct launcher_id oracle_mod_hash announcer_mod_hash price last_updated)
    (curry_hashes
      (f statutes_struct) ; singleton mod hash
      (sha256tree (c (f statutes_struct) (c launcher_id (r (r statutes_struct)))))
      ; no hashing as we're expecting a puzzle here, so mod_hash is fine
      (curry_hashes oracle_mod_hash
        (sha256tree oracle_mod_hash)
        (sha256tree statutes_struct)
        (sha256tree announcer_mod_hash)
        (sha256tree price)
        (sha256tree last_updated)
      )
    )
  )

  (assign
    (op_code mutation_index mutation_value) (if mutation mutation (() () ()))
    (statutes prices cumulative_stability_fee cumulative_interest_rate)
      ; TODO: move op_code to op_program, that is revealed only when mutation is needed, saving space
      (if (= op_code 1)
        (list
          ; we're maybe updating, if indexes match and it's not announcements
          (if (= mutation_index -1)
            STATUTES
            (mutate-list mutation_index mutation_value STATUTES 0)
          )
          ; prices staying the same
          PRICES
          ; don't change the rate
          PAST_CUMULATIVE_STABILITY_FEE_RATE
          PAST_CUMULATIVE_INTEREST_RATE
        )
        (if (= op_code 2)
          ; we're updating prices
          (list STATUTES
            ; get the price, mutation value -> (oracle_index price last_updated)
            (mutate-list mutation_index (r mutation_value) PRICES 0)
            ; second index on statutes is current stability_fee rate in 2 decimals eg 500 -> 5%
            ; to calculate stability_fee rate we need:
            ; - past cumulative stability_fee rate
            ; - current stability_fee rate
            ; - current timestamp
            ; - last timestamp of calculation previously
            (calculate-cumulative-stability-fee-rate
              PAST_CUMULATIVE_STABILITY_FEE_RATE
              (f (f (r STATUTES)))
              (f (r (r mutation_value))) ; current timestamp
              ; get previous timestamp when price was last updated
              ; NOTE: this assumes that at least one oracle is always present and active at position 0
              (f (r (get-list-item-at-index (f mutation_value) PRICES 0))) ; prev timestamp
            )
            (calculate-cumulative-stability-fee-rate
              PAST_CUMULATIVE_INTEREST_RATE
              ; current interest rate
              (f (f (r (r STATUTES))))
              (f (r (r mutation_value)))
              ; get previous timestamp when price was last updated
              ; NOTE: this assumes that at least one oracle is always present and active at position 0
              (f (r (get-list-item-at-index (f mutation_value) PRICES 0)))
            )
          )
          ; unknown opcode, default to existing values
          (list STATUTES PRICES PAST_CUMULATIVE_STABILITY_FEE_RATE PAST_CUMULATIVE_INTEREST_RATE)
        )
      )
    create_coin_condition (create-coin-condition
      MOD_STATUTES_HASH
      TREASURY_APPROVAL_MOD_HASHES
      P2_TREASURY_MOD_HASH
      P2_SURPLUS_AUCTION_MOD_HASH
      CAT_MOD_HASH
      OFFER_MOD_HASH
      CRT_TAIL_HASH
      statutes
      prices
      cumulative_stability_fee
      cumulative_interest_rate
    )

    ; add announcements if any
    announcements (if (all (= op_code 1) (= mutation_index -1))
      ; filter announcements
      (filter-ann-conditions (f mutation_value) ())
      ; no announcements
      ()
    )
    conditions (c create_coin_condition
      (c
        (list CREATE_PUZZLE_ANNOUNCEMENT
          (concat STATUTES_ANN_PREFIX (sha256tree (list STATUTE_PREFIX -6 P2_SURPLUS_AUCTION_MOD_HASH)))
        )
        (c
          (list CREATE_PUZZLE_ANNOUNCEMENT
            (concat STATUTES_ANN_PREFIX (sha256tree (list STATUTE_PREFIX -5 OFFER_MOD_HASH)))
          )
          (c
            (list CREATE_PUZZLE_ANNOUNCEMENT
              (concat STATUTES_ANN_PREFIX (sha256tree (list STATUTE_PREFIX -4 P2_TREASURY_MOD_HASH)))
            )
            (c
              (list CREATE_PUZZLE_ANNOUNCEMENT
                (concat STATUTES_ANN_PREFIX (sha256tree (list STATUTE_PREFIX -3 TREASURY_APPROVAL_MOD_HASHES)))
              )
              (c
                (list CREATE_PUZZLE_ANNOUNCEMENT
                  (concat STATUTES_ANN_PREFIX (sha256tree (list STATUTE_PREFIX -2 cumulative_interest_rate)))
                )
                (c
                  (list CREATE_PUZZLE_ANNOUNCEMENT
                    (concat STATUTES_ANN_PREFIX (sha256tree (list STATUTE_PREFIX -1 cumulative_stability_fee)))
                  )
                  (announce-statutes
                    prices
                    PRICE_PREFIX 0
                    (announce-statutes statutes STATUTE_PREFIX 0 announcements)
                  )
                )
              )
            )
          )
        )
      )
    )

    (if (any (= op_code 2) (= op_code 1))
      (if (= op_code 1)
        ;  updating statutes, assert permission
        (c
          ; confirm to CRT voting coin that mutation was applied
          (list CREATE_PUZZLE_ANNOUNCEMENT
            (concat STATUTES_ANN_PREFIX STATUTES_MUTATION_PREFIX (sha256tree (c mutation_index mutation_value)))
          )
          ; assert from CRT vote that mutation was indeed voted for and confirmed
          (c
            (list ASSERT_PUZZLE_ANNOUNCEMENT
              (sha256 (get-crt-puzzle-hash CAT_MOD_HASH CRT_TAIL_HASH crt_inner_puzzle_hash)
                                           CRT_ANN_PREFIX (sha256tree (c mutation_index mutation_value))))
            (c
              (list REMARK "mutation ann" (get-crt-puzzle-hash CAT_MOD_HASH CRT_TAIL_HASH crt_inner_puzzle_hash) mutation_index mutation_value)
              conditions
            )
          )
        )
        (if (= op_code 2)
          ; updating prices, assert permission from oracle
          (assign
            (oracle_index price last_updated ) mutation_value
            ; first item is price oracle info on statues
            oracle_info (f (f STATUTES))
            (oracle_mod_hash statutes_struct atom_announcer_puzhash) (f oracle_info)
            ;oracle_launcher_id (x (r oracle_info))
            oracle_launcher_id (get-list-item-at-index oracle_index (r oracle_info) 0)
            ; we need prev price to assert that latest one is fresher
            (prev_price prev_last_updated) (get-list-item-at-index oracle_index PRICES 0)
            (if (> (- last_updated prev_last_updated) (f (get-list-item-at-index STATUTE_MIN_PRICE_UPDATE_DELAY STATUTES 0)))
                ; confirm to oracle price announcement to update the price
                (c
                  (list ASSERT_PUZZLE_ANNOUNCEMENT (sha256 (get-oracle-puzzle-hash
                                                              statutes_struct
                                                              oracle_launcher_id
                                                              oracle_mod_hash
                                                              atom_announcer_puzhash
                                                              price
                                                              last_updated)
                                                            price))
                  conditions)
                (x "price not old enough")
            )
          )
          (x "boop") ; should never happen since we only allow 1 or 2 as op_code
        )
      )
      conditions
    )
  )
)
