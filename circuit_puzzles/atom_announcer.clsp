(mod (MOD_HASH PUB_KEY VALUE BEFORE_TIMESTAMP_EXPIRES (@ lineage (parent_id prev_value prev_timestamp)) (@ mutation (current_timestamp atom_value)))
  (include condition_codes.clib)
  (include curry.clib)
  (include *standard-cl-23*)
  (include sha256tree.clib)
  (defconstant ONE 1)
  (defconstant b32 32)

  (defun-inline size-b32 (var)
    (= (strlen var) b32)
  )

  (defun-inline calculate-coin-id (parent puzzle_hash amount)
    (if (all (size-b32 parent) (size-b32 puzzle_hash) (> amount -1))
      (sha256 parent puzzle_hash amount)
      (x)
    )
  )
  (if mutation
    (if (l atom_value)
      (x) ; can't be a list/cons
      (list 
        ; we don't need any mojos so why waste 
        (list ASSERT_MY_AMOUNT 0)
        ; only pub key owner can set the value 
        (list AGG_SIG_ME PUB_KEY (sha256tree mutation))
        ; TODO: do we need to check that current timestamp should be somewhat current

        (list CREATE_COIN
          (curry_hashes MOD_HASH 
              (sha256 ONE MOD_HASH)
              (sha256 ONE PUB_KEY)
              (sha256 ONE atom_value)
              ; TODO: this should be a variable, not fixed
              (sha256 ONE (+ current_timestamp 360))
          )
          0
        )
      )
    )
    ; ELSE -> no mutation, announce the price
    (list
      ; we don't need any mojos so why waste
      (list ASSERT_MY_AMOUNT 0)
      (list CREATE_PUZZLE_ANNOUNCEMENT '!')
      (list ASSERT_BEFORE_SECONDS_ABSOLUTE BEFORE_TIMESTAMP_EXPIRES)
      ; assert parent to ensure someone is not messing with values without approving with pubkey 
      ; ensuring that parent was indeed spent with our puzzle and pubkey 
      (list ASSERT_MY_PARENT_ID 
        (calculate-coin-id
          parent_id
          (curry_hashes 
            MOD_HASH 
            (sha256 ONE MOD_HASH)
            (sha256 ONE PUB_KEY)
            (sha256 ONE prev_value) 
            (sha256 ONE prev_timestamp)
          ) 
          0
        )
      )
      (list CREATE_COIN
        (curry_hashes MOD_HASH
            (sha256 ONE MOD_HASH)
            (sha256 ONE PUB_KEY)
            (sha256 ONE VALUE)
            (sha256 ONE BEFORE_TIMESTAMP_EXPIRES)
        )
        0
      )
    )
  )
)
