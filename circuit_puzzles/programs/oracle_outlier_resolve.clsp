(mod (
      MOD_HASH
      STATUTES_STRUCT
      OUTLIER_VOTE_SEQUENCE
      PRICE_INFOS
      TEMP_BAN_LIST
      OUTLIER_INFO
      ; solution
      outlier_resolve_info  ; see below for definition
      input_announcement_asserts
    )

  (include *standard-cl-23.1*)
  (include curry.clib)
  (include utils.clib)
  (include statutes_utils.clib)
  (include condition_codes.clib)
  (include oracle.clib)

    ; helper to check if announcer already in existing_ban_list
  (defun in-list (lst item)
    (if lst
      (if (= (f lst) item)
        1
        (in-list (r lst) item)
      )
      ()
    )
  )

  ; helper to decide ban announcer conditionally
  (defun get-banned-announcer-ids-helper (launcher_id votes threshold existing_ban_list)
    (if (> (abs votes) threshold)
      ; announcer should be banned, add to list if not already banned
      (if (in-list existing_ban_list launcher_id)
        existing_ban_list ; already present
        (c launcher_id existing_ban_list) ; newly added
      )
      existing_ban_list ; threshold not reached
    )
  )

  (defun get-banned-announcer-ids (ids ban_list threshold existing_ban_list)
    (if ids
      (get-banned-announcer-ids
        (r ids)                   ; next announcer ids
        (r ban_list)              ; votes for next announcers
        threshold
        (get-banned-announcer-ids-helper
          (f ids)
          (f ban_list)
          threshold
          existing_ban_list
        )
      )
      existing_ban_list ; finished processing all ids
    )
  )

  (assign
    (
      statutes_inner_puzzle_hash
      min_ban_threshold_percent
      vote_extension_interval
      max_voting_interval
      current_timestamp
      temp_ban_interval
    ) outlier_resolve_info
    ; OUTLIER_INFO -> ((aggregate vote info) (participating_announcers price_info)
    (
      first_vote_timestamp
      prev_vote_timestamp
      agg_ban_votes_list
      agg_amount_direction
      agg_amount
    ) (f OUTLIER_INFO)
    statutes_puzzle_hash (calculate-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
    active_announcer_ids (f (r OUTLIER_INFO))
    ; calculate the min ban vote amount using threshold and agg_amount
    min_ban_vote_amount (/ (* agg_amount min_ban_threshold_percent) 10000)
    price_info_to_apply (if (> agg_amount_direction 0) (r (r OUTLIER_INFO)) ())
    price_infos (if price_info_to_apply
      (merge-lists PRICE_INFOS (list price_info_to_apply))
      PRICE_INFOS
    )
    prev_ban_list (if TEMP_BAN_LIST
      (if (> (+ (f TEMP_BAN_LIST) temp_ban_interval) current_timestamp)
        (r TEMP_BAN_LIST)
        ()
      )
      ()
    )
    new_ban_list (get-banned-announcer-ids active_announcer_ids agg_ban_votes_list min_ban_vote_amount prev_ban_list)
    full_ban_list (if new_ban_list
      (c current_timestamp new_ban_list)
      ()
    )
    (assert
      ; new vote should be within the vote interval
      (any
        (> current_timestamp (+ prev_vote_timestamp vote_extension_interval))
        (> current_timestamp (+ first_vote_timestamp max_voting_interval))
      )
      (li
        (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp MAX_TX_BLOCK_TIME ))
        ; current_timestamp - 1 min should've passed already too, this is to ensure current timestamp is
        ; within a boundary of last_block > current_timestamp - 1 block < next block
        (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp MAX_TX_BLOCK_TIME))
        (assert-statute statutes_puzzle_hash STATUTE_ORACLE_OUTLIER_APPROVAL_INTERVAL vote_extension_interval)
        (assert-statute statutes_puzzle_hash STATUTE_ORACLE_OUTLIER_MIN_BAN_THRESHOLD_PCT min_ban_threshold_percent)
        (list
          CREATE_COIN
          (curry_hashes MOD_HASH
            (sha256 ONE MOD_HASH)
            (sha256tree STATUTES_STRUCT)
            (sha256 ONE OUTLIER_VOTE_SEQUENCE)
            (sha256tree price_infos)
            (sha256tree full_ban_list)
            (sha256 ONE ()) ; disable outlier since we have a resolution
          )
          ; min singleton amount, force it to be ONE
          ONE
        )
        (list REMARK price_infos () full_ban_list () OUTLIER_VOTE_SEQUENCE)
        &rest (verify-announcement-asserts input_announcement_asserts ())
      )
    )
  )
)