(mod
  (
    CAT_MOD_HASH BYC_TAIL_MOD_HASH
    (@ VAULT_STATE
      (
       COLLATERAL PRINCIPAL AUCTION_STATE INNER_PUZZLE_HASH
       STATUTES_STRUCT DISCOUNTED_PRINCIPAL TRANSFERRED_FEES statutes_puzzle_hash
      )
    )
    (@ args
      (
        reconcile_amount
        current_timestamp
        ;my_coin_id ; NEW: not needed?!
        treasury_coin_info
        ;auction_timeout ; NEW: no longer needed
        treasury_mod_hash
        ;minimum_debt_amount ; NEW: no longer needed
      )
    )
  )

  (include *standard-cl-23.1*)
  (include utils.clib)
  (include vault.clib)
  (include statutes_utils.clib)
  (include condition_codes.clib)
  (include curry.clib)

  ; NOTE: in a real-life loan agreement, if the lender seizes collateral, there’s no further interest being
  ; charged on the borrower anymore (whereas it typically would if there’s a late payment only
  ; that does not allow the lender to seize collateral)
  (assign
    byc_tail_hash (curry_hashes BYC_TAIL_MOD_HASH (sha256tree STATUTES_STRUCT))
    (treasury_parent treasury_launcher_id treasury_prev_launcher_id treasury_amount) treasury_coin_info
    new_treasury_amount (- treasury_amount reconcile_amount)
    treasury_coin_id (calculate-byc-coin-id
      CAT_MOD_HASH
      byc_tail_hash
      (list
        treasury_parent
        treasury_amount
        (curry_hashes
          treasury_mod_hash
          (sha256 ONE treasury_mod_hash)
          (sha256tree STATUTES_STRUCT)
          (sha256 ONE treasury_launcher_id)
          (sha256 ONE treasury_prev_launcher_id)
        )
      )
    )
    ;(x AUCTION_STATE)
    (
      auction_start_time
      start_price
      step_price_decrease_factor
      step_time_interval
      initiator_puzzle_hash
      initiator_incentive_balance
      ;cumulative_stability_fee_df
      auction_timeout ; NEW
      ;liquidation_penalty_bps ; NEW
      minimum_debt_amount ; NEW
      byc_to_treasury_balance ; NEW
      byc_to_melt_balance ; NEW
    ) (assert AUCTION_STATE AUCTION_STATE)
    ;(x byc_to_melt_balance)
    ;debt (+ PRINCIPAL TRANSFERRED_FEES)
    ;(leftover_principal . leftover_transferred_fees) (if (> TRANSFERRED_FEES reconcile_amount)
    ;  (c PRINCIPAL (- TRANSFERRED_FEES reconcile_amount))
    ;  (c (- PRINCIPAL (- reconcile_amount TRANSFERRED_FEES)) 0)
    ;)
    leftover_byc_to_melt_balance (- byc_to_melt_balance reconcile_amount)
    ;(x byc_to_melt_balance reconcile_amount leftover_byc_to_melt_balance)
    auction_state (if (= byc_to_melt_balance reconcile_amount)
      ()
      (list
        0 ; auction_start_time
        0 ; start_price
        0 ; step_price_decrease_factor
        0 ; step_time_interval
        0 ; initiator_puzzle_hash
        0 ; initiator_incentive_balance ; initiator is no longer getting paid
        0 ; auction_timeout
        minimum_debt_amount
        0 ; byc_to_treasury_balance ; fees paid to treasury cancel out
        leftover_byc_to_melt_balance
      )
    )
    ;(x leftover_byc_to_melt_balance auction_state COLLATERAL)
    (assert
      ; check that there is no collateral left
      (= COLLATERAL 0)
      ;(> PRINCIPAL 0)
      ; must recover debt fully are leave more than min debt amount
      (if (> byc_to_melt_balance reconcile_amount)
        (> (- byc_to_melt_balance reconcile_amount) minimum_debt_amount)
        (= byc_to_melt_balance reconcile_amount)
      )
      (> reconcile_amount 0)
      ;(x COLLATERAL byc_to_melt_balance reconcile_amount leftover_byc_to_melt_balance treasury_amount minimum_debt_amount)
      (list
        (list
          0 ; transferred fees
          COLLATERAL
          0 ; principal
          auction_state
          INNER_PUZZLE_HASH
          0 ; discounted principal
        )
        (list
            (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp MAX_TX_BLOCK_TIME))
            (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp MAX_TX_BLOCK_TIME))
            (assert-statute statutes_puzzle_hash STATUTE_TREASURY_MOD_HASH treasury_mod_hash)
            ; signal to tail that it can melt BYC with certain amount
            (list SEND_MESSAGE 0x3f
              (concat
                PROTOCOL_PREFIX
                (sha256tree
                  (c "x"
                    (c (* -1 reconcile_amount)
                      STATUTES_STRUCT ; LATER: needed as already used in calculation of treasury_coin_id?
                    )
                  )
                )
              )
              treasury_coin_id
            )
            ; approve treasury coin to allow a withdrawal
            (list SEND_MESSAGE 0x3f
              (concat
                PROTOCOL_PREFIX
                (sha256tree (c (* -1 reconcile_amount) new_treasury_amount))
              )
              treasury_coin_id
            )
            ;(list ASSERT_MY_COIN_ID my_coin_id) ; NEW: not needed?!
        )
      )
    )
  )
)
