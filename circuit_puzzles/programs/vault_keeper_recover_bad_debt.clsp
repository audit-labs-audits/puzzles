(mod
  (
    CAT_MOD_HASH BYC_TAIL_MOD_HASH
    (@ VAULT_STATE
      (
       COLLATERAL PRINCIPAL AUCTION_STATE INNER_PUZZLE_HASH
       STATUTES_STRUCT DISCOUNTED_PRINCIPAL TRANSFERRED_FEES statutes_puzzle_hash
      )
    )
    (@ args
      (
        reconcile_amount
        current_timestamp
        treasury_coin_info
        treasury_mod_hash
      )
    )
  )

  (include *standard-cl-23.1*)
  (include utils.clib)
  (include vault.clib)
  (include statutes_utils.clib)
  (include condition_codes.clib)
  (include curry.clib)

  (assign
    byc_tail_hash (curry_hashes BYC_TAIL_MOD_HASH (sha256tree STATUTES_STRUCT))
    (treasury_parent treasury_launcher_id treasury_prev_launcher_id treasury_amount) treasury_coin_info
    new_treasury_amount (- treasury_amount reconcile_amount)
    treasury_coin_id (calculate-byc-coin-id
      CAT_MOD_HASH
      byc_tail_hash
      (list
        treasury_parent
        treasury_amount
        (curry_hashes
          treasury_mod_hash
          (sha256 ONE treasury_mod_hash)
          (sha256tree STATUTES_STRUCT)
          (sha256 ONE treasury_launcher_id)
          (sha256 ONE treasury_prev_launcher_id)
        )
      )
    )
    (
      auction_start_time
      start_price
      step_price_decrease_factor
      step_time_interval
      initiator_puzzle_hash
      initiator_incentive_balance
      auction_timeout
      minimum_debt_amount
      byc_to_treasury_balance
      byc_to_melt_balance
    ) (assert AUCTION_STATE AUCTION_STATE)
    leftover_byc_to_melt_balance (- byc_to_melt_balance reconcile_amount)
    auction_state (if (= byc_to_melt_balance reconcile_amount)
      ()
      (list
        0 ; auction_start_time
        0 ; start_price
        0 ; step_price_decrease_factor
        0 ; step_time_interval
        0 ; initiator_puzzle_hash
        0 ; initiator_incentive_balance. initiator is no longer getting paid
        0 ; auction_timeout
        minimum_debt_amount
        0 ; byc_to_treasury_balance. fees paid to treasury cancel out
        leftover_byc_to_melt_balance
      )
    )
    (assert
      ; check that there is no collateral left
      (= COLLATERAL 0)
      ; must recover debt fully or leave more than min debt amount
      (if (> byc_to_melt_balance reconcile_amount)
        (> (- byc_to_melt_balance reconcile_amount) minimum_debt_amount)
        (= byc_to_melt_balance reconcile_amount)
      )
      (> reconcile_amount 0)
      (list
        (list
          0 ; transferred fees
          COLLATERAL
          0 ; principal
          auction_state
          INNER_PUZZLE_HASH
          0 ; discounted principal
        )
        (list
          (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp MAX_TX_BLOCK_TIME))
          (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp MAX_TX_BLOCK_TIME))
          (assert-statute statutes_puzzle_hash STATUTE_TREASURY_MOD_HASH treasury_mod_hash)
          ; signal to tail that it can melt BYC with certain amount
          (list SEND_MESSAGE 0x3f
            (concat
              PROTOCOL_PREFIX
              (sha256tree
                (c "x"
                  (c (* -1 reconcile_amount)
                    STATUTES_STRUCT ; LATER: not needed as already used in calculation of treasury_coin_id?
                  )
                )
              )
            )
            treasury_coin_id
          )
          ; approve treasury coin to allow a withdrawal
          (list SEND_MESSAGE 0x3f
            (concat
              PROTOCOL_PREFIX
              (sha256tree (c (* -1 reconcile_amount) new_treasury_amount))
            )
            treasury_coin_id
          )
        )
      )
    )
  )
)
