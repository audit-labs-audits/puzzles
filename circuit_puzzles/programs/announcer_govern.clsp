; governance backdoor
; we either activate this announcer or deactivate, can happen at any time via CRT vote
(mod ((MOD_HASH STATUTES_STRUCT LAUNCHER_ID INNER_PUZZLE_HASH APPROVED DEPOSIT DELAY ATOM_VALUE TIMESTAMP_EXPIRES)
      ; solution
      inner_puzzle_hash new_puzzle_hash deposit input_conditions
      (current_timestamp statutes_inner_puzzle_hash input_toggle_activation)
     )
  (include condition_codes.clib)
  (include curry.clib)
  (include *standard-cl-23*)
  (include utils.clib)
  (include statutes_utils.clib)
  (include announcer.clib)

  (assign
    toggle_activation (assert (any (= input_toggle_activation 0) (= input_toggle_activation 1)) input_toggle_activation)
    statutes_puzzle_hash (calculate-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
    operation_conditions (recreate-myself-condition MOD_HASH
      STATUTES_STRUCT
      LAUNCHER_ID
      INNER_PUZZLE_HASH
      input_toggle_activation ; current statutes price counter passed
      deposit
      DELAY
      (if (= toggle_activation 0) ATOM_VALUE 0) ; on activation, atom value must be zero
      ; on activation, we give the announcer some time to update the price before we penalize
      ; it's activated but can't be announced until it updates the price
      (if (= toggle_activation 0) TIMESTAMP_EXPIRES (+ current_timestamp DELAY))
      (if (all (= toggle_activation 0) APPROVED (> (- DEPOSIT deposit) 0))
        ; unallocated XCH goes to tx fee to ensure owner can't block us for long
        (c (list RESERVE_FEE (- DEPOSIT deposit))
          input_conditions
        )
        input_conditions
      )
    )
    (c
      (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp MAX_TX_BLOCK_TIME))
      (c
        (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp MAX_TX_BLOCK_TIME))
        (c
          (list RECEIVE_MESSAGE 0x10
            (concat
              ANN_PREFIX
              LAUNCHER_ID
              toggle_activation
            )
            statutes_puzzle_hash
          )
          operation_conditions
        )
      )
    )
  )

)