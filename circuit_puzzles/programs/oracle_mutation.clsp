; REVIEW: Optimize chialisp and then audit
(mod (MOD_HASH STATUTES_STRUCT ATOM_ANNOUNCER_PUZZLE_HASH PRICES LAST_UPDATED
      (@ oracle_mutation
              (
                oracle_mutation_program
                statutes_inner_puzzle_hash
                m_of_n
                price_updatable_after_seconds
                price_updatable_threshold_percent
                price_expiration_seconds
                announcer_delay
                announcer_deposit
                current_timestamp
                ; price_announcers -> ((inner_puzzle_hash args_hash price))
                price_announcers
              )

      )
      input_announcement_asserts
      )
  (include *standard-cl-23*)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)
  (include utils.clib)
  (include oracle.clib)

  (defun filter (pred (@ lst (first . rest)))
    (if lst
      (assign item (a pred (list first))
        (if item
          (c item (filter pred rest))
          (filter pred rest)
        )
      )
      ()
    )
  )

  (defun list-length (lst count)
    (if lst
      (list-length (r lst) (+ count 1))
      count
    )
  )

  (defun not-contains (lst item)
    (if lst
      (if (= (f (f lst)) item)
        (x)
        (not-contains (r lst) item)
      )
      1
    )
  )

  (defun unique (lst)
    (if (r lst)
      (if (not-contains (r lst) (f (f lst)))
        (unique (r lst))
        (x)
      )
      1
    )
  )

  (defun _reverse (L R)
    (if L
      (_reverse
        (r L)
        (c (f L) R)
      )
      R
    )
  )


  (defun-inline endp (L)
    (if L
      (if (r L)
        0
        1
      )
      1
    )
  )

  (defun _split (Z L R)
    (if (endp R)
        (c (_reverse L ()) Z)
        (_split (r Z) (c (f Z) L) (r (r R))))
    )


  (defun _merge ((@ L ((_ _ L_price) . L_rest)) (@ R ((_ _ R_price) . R_rest)) A)
    (if (any L R)
      (if L
        (if R
          (if (> R_price L_price)
            (_merge L_rest R (c (f L) A))
            (_merge L R_rest (c (f R) A))
          )
          (_merge L_rest () (c (f L) A))
        )
        (_merge () R_rest (c (f R) A))
      )
      (_reverse A ())
    )
  )


  ; thanks @geoff for the mergesort implementation on https://aggsig.me/mergesort.html
  (defun mergesort (Z)
    (if Z
      (if (r Z)
        (assign
          (L . R) (_split Z () Z)
          (_merge (mergesort L) (mergesort R) ())
        )
        Z
      )
      ()
    )
  )


  (defun-inline get-median-index (length)
    ; if odd, we return the middle value
    ; if even, we return the one smaller since prices are sorted in descending order
    (/ length 2)
  )
  (defun get-price (prices index curr_index)
    (if prices
      (if (= index curr_index)
        (f prices)
        (get-price (r prices) index (+ curr_index 1))
      )
      (x)
    )
  )

  (assign
    price_announcers_length (if oracle_mutation (list-length price_announcers 0) ())
    statutes_puzzle_hash (calculate-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
    sorted_prices (mergesort price_announcers)
    ; get median price, divide length by 2 and add 1 to get the middle when length is even
    mean_price (f (r (r (get-price sorted_prices (get-median-index price_announcers_length) 0))))
    announcer_conditions (generate-ann-conditions
      STATUTES_STRUCT
      ATOM_ANNOUNCER_PUZZLE_HASH
      announcer_deposit
      announcer_delay
      price_announcers
    )
    new_prices (merge-lists
      (cut-prices PRICES (- current_timestamp price_expiration_seconds))
      (list (c mean_price current_timestamp))
    )
    (next_price . next_price_updated) (f new_prices)
    (last_price . _) (last-item PRICES)
    ;  new coin will have updated price, increase the counter of updates
    ;###  main expression
    ; check that we haven't updated the price recently OR new price is much higher than previous
    (assert
      (> price_announcers_length (- m_of_n 1))
      ; check that prices are unique
      (unique price_announcers)
      (> current_timestamp LAST_UPDATED)
      (any
        (> (- current_timestamp LAST_UPDATED) price_updatable_after_seconds)
        (if (> last_price 0)
          (> (abs (/ (* (- last_price mean_price) PERCENT_PRECISION) last_price) ) price_updatable_threshold_percent)
          ; no prices in buffer, update now
          1
        )
        (not (r new_prices)) ; only latest price in the list, this is fine too as all other prices are expired
      )
      ; should be confirmed at least within 5 blocks since it was pushed to mempool
      (c (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp MAX_TX_BLOCK_TIME ))
        ; current_timestamp - 1 min should've passed already too, this is to ensure current timestamp is
        ; within a boundary of last_block > current_timestamp - 1 block < next block
        (c (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp MAX_TX_BLOCK_TIME))
          (c (assert-statute statutes_puzzle_hash STATUTE_ORACLE_M_OF_N m_of_n)
            (c (assert-statute statutes_puzzle_hash STATUTE_ORACLE_PRICE_UPDATABLE_AFTER_SECONDS price_updatable_after_seconds)
              (c (assert-statute statutes_puzzle_hash STATUTE_ORACLE_PRICE_UPDATABLE_PERCENT_THRESHOLD price_updatable_threshold_percent)
                (c (assert-statute statutes_puzzle_hash STATUTE_ANNOUNCER_DELAY announcer_delay)
                  (c (assert-statute statutes_puzzle_hash STATUTE_ANNOUNCER_MIN_DEPOSIT announcer_deposit)
                    (c (assert-statute statutes_puzzle_hash STATUTE_ORACLE_PRICE_EXPIRATION_SECONDS price_expiration_seconds)
                      (c
                        (list CREATE_PUZZLE_ANNOUNCEMENT
                          (if (> last_price -1)
                            (sha256 next_price next_price_updated)
                            (sha256 mean_price current_timestamp)
                          )
                        )
                        (c
                          (list
                            CREATE_COIN
                            (curry_hashes MOD_HASH
                              (sha256 ONE MOD_HASH)
                              (sha256tree STATUTES_STRUCT)
                              (sha256 ONE ATOM_ANNOUNCER_PUZZLE_HASH)
                              (sha256tree new_prices)
                              (sha256 ONE current_timestamp)
                            )
                            ; min singleton amount, force it to be ONE
                            1
                          )
                          (c
                            (list REMARK new_prices mean_price last_price current_timestamp)
                            (verify-announcement-asserts input_announcement_asserts announcer_conditions)
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)