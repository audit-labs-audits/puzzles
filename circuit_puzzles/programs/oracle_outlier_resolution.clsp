(mod (
      OUTLIER_RESOLVER_MOD_HASH ; next 3 hashes are curried into the operation, not required by oracle puzzle to keep
      CAT_MOD_HASH
      CRT_TAIL_HASH
      ; oracle state
      MOD_HASH
      STATUTES_STRUCT
      PRICE_INFOS
      TEMP_BAN_LIST  ; (expiry_timestamp . list of banned announcer launcher_ids)
      OUTLIER_INFO  ; ((decision_timestamp decision_bool prev_temp_ban_list amount) . (price . price_timestamp))
      ; solution
      new_outlier_resolution  ; see below for definition
      input_announcement_asserts
      )
  (include *standard-cl-23.1*)
  (include curry.clib)
  (include utils.clib)
  (include statutes_utils.clib)
  (include condition_codes.clib)
  (include oracle.clib)

  (assign
    (
      program_mod ; LATER: not used anywhere, delete
      statutes_inner_puzzle_hash
      new_temp_ban_list ; excludes timestamp, i.e. announcer launcher ids only
      cooldown_interval ; LATER: rename to activation_delay?
      outlier_approval_interval
      outlier_resolver_parent_id
      inner_puzzle ; LATER: only puzzle hash needed, and rename to outlier_resolver_inner_puzzle_hash
      new_decision_bool
      new_amount
      current_timestamp
    ) new_outlier_resolution
    (
      decision_timestamp
      current_decision_bool
      prev_temp_ban_list
      current_amount
    ) (if (f OUTLIER_INFO) (f OUTLIER_INFO) (list 0 0 () 0))
    matured (all decision_timestamp (> (- current_timestamp decision_timestamp) outlier_approval_interval))
    (price_info_to_apply temp_ban_list outlier_info)
      ; we have a decision, check if it's time to resolve it
      (if matured
        ; resolve. decision has passed approval interval, apply it
        (list
          ; add price to apply if decision is true, else skip
          (if current_decision_bool (r OUTLIER_INFO) ())
          ; temp ban list set in previous decision becomes effective but we update the timestamp
          (c current_timestamp (r prev_temp_ban_list)) ; (r (f (r (r (f OUTLIER_INFO))))))
          () ; reset outlier info
        )
        ; vote. still can override, but only if parent is set
        (assert outlier_resolver_parent_id
          (list
            ()  ; we're setting a new decision, no price to apply yet
            TEMP_BAN_LIST  ; keep old temp ban list in effect
            ; we set a new outlier decision info, but leave the price data
            ; LATER: no need to store the timestamp twice in OUTLIER_INFO. suggestion: drop it from outlier info temp ban list
            (c (list current_timestamp new_decision_bool (c current_timestamp new_temp_ban_list) new_amount) (r OUTLIER_INFO))
          )
        )
      )
    ; price infos are sorted by timestamp, oldest first
    price_infos (if price_info_to_apply
      (merge-lists PRICE_INFOS (list price_info_to_apply))
      PRICE_INFOS
    )
    statutes_puzzle_hash (calculate-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)

    outlier_resolver_coin_id (if (all (not matured) outlier_resolver_parent_id)
      (calculate-coin-id
        outlier_resolver_parent_id
        (curry_hashes CAT_MOD_HASH
          (sha256 ONE CAT_MOD_HASH)
          (sha256 ONE CRT_TAIL_HASH)
          (curry_hashes OUTLIER_RESOLVER_MOD_HASH
            (sha256tree inner_puzzle)
          )
        )
        new_amount
      )
      ()
    )
    (assert
      (size_b32 statutes_inner_puzzle_hash)
      (size_uint32 cooldown_interval)
      (size_b1 new_decision_bool)
      ; new resolution needs to have higher amount of CRTs
      (any (not outlier_resolver_coin_id) (> new_amount current_amount))
      (> current_timestamp decision_timestamp)
      (li
        (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp MAX_TX_BLOCK_TIME ))
        ; current_timestamp - 1 min should've passed already too, this is to ensure current timestamp is
        ; within a boundary of last_block > current_timestamp - 1 block < next block
        (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp MAX_TX_BLOCK_TIME))
        ; receive message from CRT coin with custom puzzle, if parent coin is set
        (if outlier_resolver_coin_id
          (list RECEIVE_MESSAGE 0x3f
            (concat PROTOCOL_PREFIX (sha256tree (c new_temp_ban_list (c new_decision_bool (c cooldown_interval new_amount)))))
            outlier_resolver_coin_id
          )
          (list REMARK)
        )
        ; enforce correct interval to use when cooling down after coin is created for making outlier resolutions
        (assert-statute statutes_puzzle_hash STATUTE_ORACLE_OUTLIER_PUZZLE_COOLDOWN_INTERVAL cooldown_interval)
        (assert-statute statutes_puzzle_hash STATUTE_ORACLE_OUTLIER_APPROVAL_INTERVAL outlier_approval_interval)
        (list
          CREATE_COIN
          (curry_hashes MOD_HASH
            (sha256 ONE MOD_HASH)
            (sha256tree STATUTES_STRUCT)
            (sha256tree price_infos)
            (sha256tree temp_ban_list)
            (sha256tree outlier_info)
          )
          ; min singleton amount, force it to be ONE
          ONE
        )
        (list REMARK price_infos () temp_ban_list outlier_info)
        &rest (verify-announcement-asserts input_announcement_asserts ())
      )
    )
  )
)