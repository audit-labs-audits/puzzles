(mod (STATUTES PRICES PAST_CUMULATIVE_STABILITY_FEE_RATE PAST_CUMULATIVE_INTEREST_RATE  CAT_MOD_HASH CRT_TAIL_HASH
      mutation_index mutation_value crt_inner_puzzle_hash)
  (include *standard-cl-23*)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)
  (include utils.clib)

  (defconst PRECISION 10000000000)

  (defun calculate-cumulative-stability-fee-rate
      (past_cumulative_stability_fee
       current_stability_fee
       current_timestamp
       previous_timestamp
      )
    (if (> previous_timestamp current_timestamp)
      past_cumulative_stability_fee
      (calculate-cumulative-stability-fee-rate
        (/ (* past_cumulative_stability_fee current_stability_fee) PRECISION)
        current_stability_fee
        current_timestamp
        ; per minute calculation
        (+ previous_timestamp 60)
      )
    )
  )

  (defun get-list-item-at-index (index a_list counter_index)
    (if a_list
      (if (= counter_index index)
        (f a_list)
        (get-list-item-at-index index (r a_list) (+ counter_index ONE))
      )
      ; fail if you don't find an item
      () ; x "index out of bounds" counter_index index a_list)
    )
  )

  (defun-inline get-oracle-puzzle-hash (statutes_struct launcher_id oracle_mod_hash announcer_mod_hash price last_updated)
    (curry_hashes
      (f statutes_struct) ; singleton mod hash
      (sha256tree (c (f statutes_struct) (c launcher_id (r (r statutes_struct)))))
      ; no hashing as we're expecting a puzzle here, so mod_hash is fine
      (curry_hashes oracle_mod_hash
        (sha256tree oracle_mod_hash)
        (sha256tree statutes_struct)
        (sha256tree announcer_mod_hash)
        (sha256tree price)
        (sha256tree last_updated)
      )
    )
  )
  ; we're updating prices
  (list
    STATUTES
    ; get the price, mutation value -> (oracle_index price last_updated)
    (mutate-list mutation_index (r mutation_value) PRICES 0)
    ; second index on statutes is current stability_fee rate in 2 decimals eg 500 -> 5%
    ; to calculate stability_fee rate we need:
    ; - past cumulative stability_fee rate
    ; - current stability_fee rate
    ; - current timestamp
    ; - last timestamp of calculation previously
    (calculate-cumulative-stability-fee-rate
      PAST_CUMULATIVE_STABILITY_FEE_RATE
      (f (f (r STATUTES)))
      (f (r (r mutation_value))) ; current timestamp
      ; get previous timestamp when price was last updated
      ; NOTE: this assumes that at least one oracle is always present and active at position 0
      (f (r (get-list-item-at-index (f mutation_value) PRICES 0))) ; prev timestamp
    )
    (calculate-cumulative-stability-fee-rate
      PAST_CUMULATIVE_INTEREST_RATE
      ; current interest rate
      (f (f (r (r STATUTES))))
      (f (r (r mutation_value)))
      ; get previous timestamp when price was last updated
      ; NOTE: this assumes that at least one oracle is always present and active at position 0
      (f (r (get-list-item-at-index (f mutation_value) PRICES 0)))
    )

    (assign
      (oracle_index price last_updated ) mutation_value
      ; first item is price oracle info on statues
      oracle_info (f (f STATUTES))
      (oracle_mod_hash statutes_struct atom_announcer_puzhash) (f oracle_info)
      ;oracle_launcher_id (x (r oracle_info))
      oracle_launcher_id (get-list-item-at-index oracle_index (r oracle_info) 0)
      ; we need prev price to assert that latest one is fresher
      (prev_price prev_last_updated) (get-list-item-at-index oracle_index PRICES 0)
      (if (> (- last_updated prev_last_updated) (f (get-list-item-at-index STATUTE_MIN_PRICE_UPDATE_DELAY STATUTES 0)))
        ; confirm to oracle price announcement to update the price
        (list
          (list ASSERT_PUZZLE_ANNOUNCEMENT
            (sha256
              (get-oracle-puzzle-hash
                statutes_struct
                oracle_launcher_id
                oracle_mod_hash
                atom_announcer_puzhash
                price
                last_updated
              )
              price
            )
          )
        )
        (x "price not old enough")
      )
    )
  )
)