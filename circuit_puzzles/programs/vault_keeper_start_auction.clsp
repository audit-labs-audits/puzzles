(mod
  (
    (@ VAULT_STATE
      (
       COLLATERAL PRINCIPAL AUCTION_STATE INNER_PUZZLE_HASH
       STATUTES_STRUCT DISCOUNTED_PRINCIPAL statutes_puzzle_hash
      )
    )
    (@ args
      (
        start_only ; -> (initiator_incentive_flat_fee initiator_incentive_relative_fee_bps liquidation_ratio statutes_cumulative_stability_fee_df current_stability_fee_df liquidation_penalty_bps)
        auction_start_time
        step_time_interval
        step_price_decrease_factor
        price_info
        starting_price_factor
        initiator_puzzle_hash ; can provide new initiator_puzzle_hash on restart. desirable or not?
        auction_timeout
        minimum_debt_amount
      )
    )
  )

  (include *standard-cl-23.1*)
  (include vault.clib)
  (include statutes_utils.clib)
  (include condition_codes.clib)
  (include utils.clib)

  ; NOTE: as in tradfi loan agreements, if the lender seizes collateral, there’s no further interest being
  ; charged on the borrower anymore (whereas it typically would if there’s a late payment only
  ; that does not allow the lender to seize collateral)
  (assign
    (
      initiator_incentive_flat_fee
      initiator_incentive_relative_fee_bps
      liquidation_ratio
      statutes_cumulative_stability_fee_df
      current_stability_fee_df
      liquidation_penalty_bps
    ) (if start_only start_only (assert (all AUCTION_STATE (not start_only)) (list 0 0 1 1 1 0))) ; if-statement should be (if start_only (assert (not AUCTION_STATE) start_only) (assert AUCTION_STATE (list 0 0 1 1 1 0)))
    ; start only
    cumulative_stability_fee_df (calculate-cumulative-discount-factor
      statutes_cumulative_stability_fee_df
      current_stability_fee_df
      ; don't allow anyone to exploit our processing interval buffer to get tx into mempool and borrow from the future
      (+ auction_start_time (* 3 MAX_TX_BLOCK_TIME))
      (r price_info)
    )
    undiscounted_principal (* MINUS_ONE (/ (* MINUS_ONE DISCOUNTED_PRINCIPAL cumulative_stability_fee_df) PRECISION))
    min_collateral_amount (get-min-collateral-amount
      undiscounted_principal
      liquidation_ratio
      (f price_info)
    )
    initiator_incentive_relative (/ (* undiscounted_principal initiator_incentive_relative_fee_bps) PRECISION_BPS)
    initiator_incentive_balance (+ initiator_incentive_flat_fee initiator_incentive_relative)
    total_fees (calculate-total-fees
      undiscounted_principal
      PRINCIPAL
      liquidation_penalty_bps
    )
    ; start and restart
    start_price (/ (* (f price_info) starting_price_factor) PRECISION_BPS) ; start_price -> last_price * starting_price_factor
    ;prev_auction_start_time (if AUCTION_STATE (f AUCTION_STATE) auction_start_time)
    auction_state (list
      auction_start_time
      start_price
      step_price_decrease_factor
      step_time_interval
      initiator_puzzle_hash
      (if AUCTION_STATE
        (f (r (r (r (r (r AUCTION_STATE)))))) ; initiator_incentive_balance
        initiator_incentive_balance
      )
      auction_timeout
      minimum_debt_amount
      (if AUCTION_STATE
        (f (r (r (r (r (r (r (r (r AUCTION_STATE))))))))) ; byc_to_treasury_balance
        (- total_fees initiator_incentive_balance)
      )
      (if AUCTION_STATE
        (f (r (r (r (r (r (r (r (r (r AUCTION_STATE)))))))))) ; byc_to_melt_balance
        PRINCIPAL
      )
    )
    conditions (list
      (list ASSERT_SECONDS_ABSOLUTE (- auction_start_time MAX_TX_BLOCK_TIME))
      (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ auction_start_time MAX_TX_BLOCK_TIME))
      (assert-price-info statutes_puzzle_hash price_info)
      (assert-statute statutes_puzzle_hash STATUTE_VAULT_AUCTION_STARTING_PRICE_FACTOR starting_price_factor)
      (assert-statute statutes_puzzle_hash STATUTE_VAULT_AUCTION_PRICE_DECREASE_BPS step_price_decrease_factor)
      (assert-statute statutes_puzzle_hash STATUTE_VAULT_AUCTION_PRICE_TTL step_time_interval)
      (assert-statute statutes_puzzle_hash STATUTE_VAULT_AUCTION_TTL auction_timeout)
      (assert-statute statutes_puzzle_hash STATUTE_VAULT_MINIMUM_DEBT minimum_debt_amount)
    )
    (list
      (list
        COLLATERAL
        0 ; PRINCIPAL
        auction_state
        INNER_PUZZLE_HASH
        0 ; DISCOUNTED_PRINCIPAL
      )
      ; is previous auction still running by checking if auction_start_time hasn't timed out
      (if (not AUCTION_STATE)
        ; start auction
        (assert
          ; we must be below min collateral ratio to start an auction
          (> min_collateral_amount COLLATERAL)
          (c (assert-statute statutes_puzzle_hash STATUTE_VAULT_LIQUIDATION_RATIO_PCT liquidation_ratio)
            (c (assert-statute statutes_puzzle_hash STATUTE_CUMULATIVE_STABILITY_FEE_DF statutes_cumulative_stability_fee_df)
              (c (assert-statute statutes_puzzle_hash STATUTE_STABILITY_FEE_DF current_stability_fee_df)
                (c (assert-statute statutes_puzzle_hash STATUTE_VAULT_INITIATOR_INCENTIVE_BPS initiator_incentive_relative_fee_bps)
                  (c (assert-statute statutes_puzzle_hash STATUTE_VAULT_INITIATOR_INCENTIVE_FLAT initiator_incentive_flat_fee)
                    (c (assert-statute statutes_puzzle_hash STATUTE_VAULT_LIQUIDATION_PENALTY_BPS liquidation_penalty_bps)
                      conditions
                    )
                  )
                )
              )
            )
          )
        )
        ; restart auction
        (assert
          ; auction must have timed out
          (> (- auction_start_time (f AUCTION_STATE)) auction_timeout)
          ; there should be collateral to auction off, o/w it's bad debt
          (> COLLATERAL 0)
          conditions
        )
      )
    )
  )
)