(mod
  (
    (MOD_HASH CAT_MOD_HASH BYC_TAIL_HASH CRT_TAIL_HASH LAST_BID LAUNCHER_ID BYC_LOT_AMOUNT STATUTES_STRUCT)
    statutes_inner_puzzle_hash lineage_proof announcements
    (
      payout_coin_parent_id
      lot_amount
      payout_mod_hash
      treasury_mod_hash
      start_time
      my_coin_id
      treasury_coins ; -> ((parent_id launcher_id ring_prev_launcher_id current_amount withdraw_amount))
      treasury_maximum
    )
  )

  (include *standard-cl-23.1*)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)
  (include utils.clib)


  (defun assert-treasury-coins-withdrawal (TREASURY_MOD_HASH CAT_MOD_HASH BYC_TAIL_HASH STATUTES_STRUCT treasury_maximum statutes_puzzle_hash
        treasury_coins ; any subset of treasury coins -> ((parent_id launcher_id ring_prev_launcher_id current_amount withdraw_amount))
        lot_amount ; amount to withdraw from treasury coins
        sum_amounts_withdrawn ; amount withdrawn from treasury coins. must be passed 0 when function is called
        new_treasury_coins_amount ; post-withdrawal amount of treasury coins. must be passed 0 when function is called
        announcements
      )
    (if treasury_coins
      (assign
        (parent_id launcher_id ring_prev_launcher_id current_amount withdraw_amount) (f treasury_coins)
        treasury_coin_id (assert
          (size_b32 launcher_id)
          (size_b32 ring_prev_launcher_id)
          (calculate-coin-id
            parent_id
            (curry_hashes CAT_MOD_HASH
              (sha256 ONE CAT_MOD_HASH)
              (sha256 ONE BYC_TAIL_HASH)
              (curry_hashes
                TREASURY_MOD_HASH
                (sha256 ONE TREASURY_MOD_HASH)
                (sha256tree STATUTES_STRUCT)
                (sha256 ONE launcher_id)
                (sha256 ONE ring_prev_launcher_id)
              )
            )
            current_amount
          )
        )
        (c
          ; send a message to approve treasury coins for withdrawal
          (list SEND_MESSAGE 0x3f
            (concat
              PROTOCOL_PREFIX
              (sha256tree (c STATUTES_STRUCT (c (* -1 withdraw_amount) (- current_amount withdraw_amount))))
            )
            treasury_coin_id
          )
          (assert-treasury-coins-withdrawal
            TREASURY_MOD_HASH CAT_MOD_HASH BYC_TAIL_HASH STATUTES_STRUCT treasury_maximum statutes_puzzle_hash
            (r treasury_coins)
            lot_amount
            (+ sum_amounts_withdrawn withdraw_amount)
            (- (+ new_treasury_coins_amount current_amount) withdraw_amount)
            announcements
          )
        )
      )
      ; we're withdrawing exactly what lot we require for this surplus auction
      ; and treasury needs to stay above maximum threshold, so to trigger surplus auction
      ; we need maximum + lot_amount
      (assert (= sum_amounts_withdrawn lot_amount) (> new_treasury_coins_amount treasury_maximum)
        (c
          (assert-statute statutes_puzzle_hash STATUTE_TREASURY_MAXIMUM treasury_maximum) ; end of recursion
          announcements
        )
      )
    )
  )

  (assign
    statutes_puzzle_hash (calculate-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
    payout_puzzle_hash (
      curry_hashes CAT_MOD_HASH
        (sha256 ONE CAT_MOD_HASH)
        (sha256 ONE BYC_TAIL_HASH)
        (curry_hashes payout_mod_hash
          (sha256 ONE payout_mod_hash)
          (sha256 ONE CRT_TAIL_HASH)
          (sha256 ONE my_coin_id)
        )
    )
    payout_coin_id (calculate-coin-id
        payout_coin_parent_id
        payout_puzzle_hash
        0 ; initial amount for the coin that holds our lot should be 0
    )
    (assert
      (size_b32 payout_mod_hash)
      ; can't run if LAST_BID is set
      (= LAST_BID ())
      ; we can only run if launcher_id is not set
      ; since we'll be using current coin id as launcher id
      ; to guarantee uniqueness based on the amount we're taking from treasury
      ; ie: there's a limited amount that can be taken from treasury
      ;     and coin_id is unique per spend. Once this coin is filled from treasury
      ;     it can't be filled again, hence can be used as unique event in this coin's history
      (= LAUNCHER_ID 0)
      (= BYC_LOT_AMOUNT 0)
      (li
        (list ASSERT_MY_PUZZLE_HASH
          (curry_hashes CAT_MOD_HASH
            (sha256 ONE CAT_MOD_HASH)
            (sha256 ONE CRT_TAIL_HASH)
            (curry_hashes
              MOD_HASH
              (sha256 ONE MOD_HASH)
              (sha256tree STATUTES_STRUCT)
              (sha256 ONE BYC_TAIL_HASH)
              (sha256 ONE CRT_TAIL_HASH)
              (sha256 ONE LAUNCHER_ID)
              (sha256 ONE BYC_LOT_AMOUNT)
              (sha256 ONE ()) ; no bid
            )
          )
        )
        ; recreate itself setting the launcher_id, empty bid and coin amount is 0
        (list
          CREATE_COIN
          (curry_hashes
            MOD_HASH
            (sha256 ONE MOD_HASH)
            (sha256tree STATUTES_STRUCT)
            (sha256 ONE BYC_TAIL_HASH)
            (sha256 ONE CRT_TAIL_HASH)
            (sha256 ONE my_coin_id)
            (sha256 ONE lot_amount)
            (sha256 ONE ()) ; no bid
          )
          0
        )
        (list ASSERT_MY_AMOUNT 0) ; enforece eve amount
        (list ASSERT_MY_COIN_ID my_coin_id)
        (assert-statute statutes_puzzle_hash STATUTE_SURPLUS_AUCTION_LOT lot_amount)
        (assert-statute statutes_puzzle_hash STATUTE_TREASURY_MOD_HASH treasury_mod_hash)
        (assert-statute statutes_puzzle_hash STATUTE_PAYOUT_MOD_HASH payout_mod_hash)
        ; start_time minus one tx block time should already be in the past
        (list ASSERT_SECONDS_ABSOLUTE (- start_time MAX_TX_BLOCK_TIME))
        ; make sure that start_time hasn't happen yet, allow it to be in mempool for 5 tx blocks
        (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ start_time (* 5 MAX_TX_BLOCK_TIME)))
        ; assert payout coin received the lot amount
        (list RECEIVE_MESSAGE 0x3f
          (concat PROTOCOL_PREFIX (sha256tree lot_amount))
          payout_coin_id
        )
        (list
          REMARK
          PROTOCOL_PREFIX
          my_coin_id
          lot_amount
          0
          ()
        ) 
        &rest
        (assert-treasury-coins-withdrawal
          treasury_mod_hash
          CAT_MOD_HASH
          BYC_TAIL_HASH
          STATUTES_STRUCT
          treasury_maximum
          statutes_puzzle_hash
          treasury_coins
          lot_amount ; amount of byc to withdraw
          0 ; sum amounts withdrawn
          0 ; post-withdrawal treasury coins amount
          announcements
        )
      )
    )
  )
)