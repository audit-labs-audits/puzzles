;; Collateral Vault Puzzle enables XCH to be locked and BYC to be minted based on XCH price.
;; This main puzzle controls creation and recreation of the coin and different run modes for the vault, since it can
;; be run by the owner or keepers. It also enforces strict lineage.
;; The operations available for the coin are:
;; - deposit collateral
;; - withdraw collateral
;; - mint BYC (create debt)
;; - repay BYC (debt + fees)
;; - liquidate vault
;; - transfer fees to treasury
;; - start auction
;; - recover bad debt

(mod ((OWNER_OPERATIONS . KEEPER_OPERATIONS) MOD_HASH CAT_MOD_HASH STATUTES_STRUCT BYC_TAIL_MOD_HASH
      TRANSFERRED_FEES
      COLLATERAL_AMOUNT
      PRINCIPAL_AMOUNT
      AUCTION_STATE INNER_PUZZLE_HASH DISCOUNTED_PRINCIPAL
      (
        lineage_proof
        ; normal solution for inner puzzle, usually a list of conditions, must include vault operation condition
        inner_puzzle
        solution
        ; a keeper operation can be run only if vault is under-collateralized
        ; - start auction
        ; - take collateral
        ; - transform to bad debt
        keeper_operation_info
      )
     )

  (include *standard-cl-23.1*)
  (include curry.clib)
  (include condition_codes.clib)
  (include condition_filtering.clib)
  (include statutes_utils.clib)
  (include utils.clib)

  ;(defconst ANN_PREFIX 0x56) ; chr(86) -> "V"

  (defun restrict-conditions ((@ conditions ((condition_code . condition_body) . rest_of_conditions)) found_remark final_conditions)
    ; RETURNS (conditions create_coin_condition_body)
    (if conditions
      (if (= condition_code CREATE_COIN)
        (x) ; no CREATE_COIN allowed
        (if (= condition_code REMARK)
          (if (and
                (l condition_body)
                (= (strlen (f condition_body)) 3)
                (= (substr (f condition_body) 0 3) PROTOCOL_PREFIX)
              )
            ; protocol remark
            (if found_remark
              (x) ; only one protocol remark allowed
              (restrict-conditions rest_of_conditions (r condition_body) final_conditions)
            )
            ; non-protocol remarks are fine
            (restrict-conditions rest_of_conditions found_remark (c (f conditions) final_conditions))
          )
          (if (any (= condition_code SEND_MESSAGE) (= condition_code RECEIVE_MESSAGE))
            (assert
              (is-valid-msg-cond condition_body)
              (restrict-conditions rest_of_conditions found_remark (c (f conditions) final_conditions))
            )
            (if (any (= condition_code CREATE_COIN_ANNOUNCEMENT) (= condition_code CREATE_PUZZLE_ANNOUNCEMENT))
              (assert
                (is-valid-ann-cond condition_body)
                (restrict-conditions rest_of_conditions found_remark (c (f conditions) final_conditions))
              )
              ; all other conditions allowed
              (restrict-conditions rest_of_conditions found_remark (c (f conditions) final_conditions))
            )
          )
        )
      )
      (list final_conditions found_remark)
    )
  )

  (defun-inline operation-program (operation)
    (f (r operation))
  )

  (assign
    statutes_struct_hash (sha256tree STATUTES_STRUCT)
    ; generate tail hash from curried params to avoid any malicious currying
    BYC_TAIL_HASH (curry_hashes BYC_TAIL_MOD_HASH
      statutes_struct_hash
    )
    raw_conditions (if keeper_operation_info keeper_operation_info (a inner_puzzle solution))
    (conditions_pre vault_operation_condition_pre) (restrict-conditions raw_conditions 0 ())
    operation_mod (operation-program vault_operation_condition_pre)
    operation_mod_hash (sha256tree operation_mod)
    (conditions vault_operation_condition)
      (if (all solution (not keeper_operation_info)) ; TODO: why do we need to check that solution is not nil?
        ; owner mode if AUCTION_STATE is empty, ie liquidation hasn't started yet
        (assert
          (not AUCTION_STATE)
          (= (sha256tree inner_puzzle) INNER_PUZZLE_HASH)
          (contains OWNER_OPERATIONS operation_mod_hash)
          (list conditions_pre vault_operation_condition_pre)
        )
        ; keeper mode
        (assert
          keeper_operation_info
          (contains KEEPER_OPERATIONS operation_mod_hash)
          (list conditions_pre vault_operation_condition_pre)
        )
      )
    (statutes_inner_puzzle_hash vault_operation . args) vault_operation_condition
    statutes_puzzle_hash (calculate-statutes-puzzle-hash (c (f STATUTES_STRUCT) statutes_struct_hash) statutes_inner_puzzle_hash)
    (
      (
        final_transferred_fees
        final_collateral_amount
        final_principal_amount
        final_auction_state
        final_inner_puzzle_hash
        final_discounted_principal
      )
      vault_conditions
    ) (a
      vault_operation
      (list
        (list COLLATERAL_AMOUNT CAT_MOD_HASH BYC_TAIL_HASH PRINCIPAL_AMOUNT AUCTION_STATE INNER_PUZZLE_HASH
              STATUTES_STRUCT DISCOUNTED_PRINCIPAL TRANSFERRED_FEES statutes_puzzle_hash)
        args
      )
    )
    
    ;inner_conditions (filter-conditions conditions vault_conditions)
    inner_conditions (merge-lists conditions vault_conditions)
    
    ; if someone messes with curried params when it's launched, setting BYC minted to a high number, and with very little collateral
    ; then they would be able to liquidate that vault immediately and inflate amount of BYC, but wait!
    ; they would have to provide that BYC to liquidate the vault, so they would have to have that BYC in the first place
    ; bu this still messes up with our accounting and creates under collateralized vaults that messes with our metrics overall
    ; assert lineage
    (c
      (c
        CREATE_COIN
        (c
          (curry_hashes MOD_HASH
            (sha256tree MOD_HASH)
            (sha256 ONE CAT_MOD_HASH)
            statutes_struct_hash
            (sha256 ONE BYC_TAIL_MOD_HASH)
            (sha256 ONE final_transferred_fees)
            (sha256 ONE final_collateral_amount)
            (sha256 ONE final_principal_amount)
            (sha256tree final_auction_state)
            (sha256 ONE final_inner_puzzle_hash)
            (sha256 ONE final_discounted_principal)
          ) ; puzzle hash
          (c  final_collateral_amount ; amount
            ; this is a list that forms the create coin condition (using cons), hence double list operator
            (list (list final_inner_puzzle_hash)) ; memos
          )
        )
      )
      (if lineage_proof
        (li
          ; verify lineage by calculating parent coin id based on lineage proof
          (list
            ASSERT_MY_PARENT_ID
            (calculate-coin-id
              (f lineage_proof)
              (tree_hash_of_apply MOD_HASH (f (r lineage_proof)))
              (f (r (r lineage_proof)))
            )
          )
          (list ASSERT_MY_AMOUNT COLLATERAL_AMOUNT)
          (list
            ; this is for the driver code to make it easy to generate puzzle reveal
            REMARK
            final_transferred_fees
            final_collateral_amount
            final_principal_amount
            final_auction_state
            final_inner_puzzle_hash
            final_discounted_principal
          )
          &rest
          inner_conditions
        )
        ; force that every vault needs to start with zero state, ie no BYC minted, no fees transferred, no principal
        ; otherwise launching a vault with pre-existing debt could cause a lot of issues
        (li
          (list
            ASSERT_MY_PUZZLEHASH
            (curry_hashes MOD_HASH
              (sha256tree MOD_HASH)
              (sha256 ONE CAT_MOD_HASH)
              statutes_struct_hash
              (sha256 ONE BYC_TAIL_MOD_HASH)
              (sha256 ONE 0)
              (sha256 ONE 0)
              (sha256 ONE 0)
              (sha256 ONE ())
              (sha256 ONE INNER_PUZZLE_HASH)
              (sha256 ONE 0)
            )
          )
          (list ASSERT_MY_AMOUNT 0)
          &rest
          inner_conditions
        )
      )
    )
  )
)