;;; Savings vault for BYC, this is a inner BYC CAT puzzle
;       collateral vaults and new treasury coin puzzle
(mod (MOD_HASH P2_TREASURY_HASH CAT_MOD_HASH CAT_TAIL_HASH STATUTES_STRUCT DISCOUNTED_DEPOSIT INNER_PUZZLE
      ; solution from here on
      lineage_proof
      statutes_inner_puzzle_hash
      current_amount
      cumulative_interest_rate
      my_coin_id
      inner_solution
      .
      (@ treasury_coin_info ((treasury_coin_parent_id treasury_coin_launcher_id
                             treasury_coin_prev_launcher_id treasury_coin_amount)))
     )

  (include *standard-cl-23*)
  (include sha256tree.clib)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)

  (defconstant ANN_PREFIX 0x53) ; chr(83) -> "S"
  (defconstant BYC_ANN_PREFIX 0x42) ; chr(66) -> "B"
  (defconstant TREASURY_ANN_PREFIX 0x24) ; -> '$'
  (defconstant MOJOS 1000000000000)
  (defconstant PERCENT_PRECISION 10000)
  (defconstant PRECISION 10000000000)


  (defun assert_ (items)
    (if (r items)
      (qq (if (unquote (f items)) (unquote (assert_ (r items))) (x (unquote (c 1 (f items))))))
      (f items)
    )
  )
  (defconstant b32 32)

  (defun-inline size-b32 (var)
    (= (strlen var) b32)
  )

  (defun-inline calculate-coin-id (parent puzzle_hash amount)
    (if (all (size-b32 parent) (size-b32 puzzle_hash) (> amount -1))
      (sha256 parent puzzle_hash amount)
      (x "invalid coin info" parent puzzle_hash amount)
    )
  )
  (defmac assert items (assert_ items))

  (defun print (to-show result) (if (all "$print$" to-show result) result result))

  (defun filter-conditions (generate-puzzle-hash
                            (@ conditions ( (condition_code . condition_rest) . rest_of_conditions))
                            found_first_create_coin
                            delta_amount
                            filtered_conditions)
    (if conditions
      (if (any (= condition_code CREATE_PUZZLE_ANNOUNCEMENT) (= condition_code CREATE_COIN_ANNOUNCEMENT))
        (if (not (any
              ; TODO: this should be less restrictive, maybe limit to exact length too
              (= 2 (strlen (f condition_rest)))
              (= (substr (f condition_rest) 0 1) ANN_PREFIX)
            ))
          (filter-conditions
            generate-puzzle-hash
            rest_of_conditions
            found_first_create_coin
            delta_amount
            (c (f conditions) filtered_conditions)
          )
          ; bad announcement found, error
          (x)
        )
        (if (= condition_code CREATE_COIN)
          (if found_first_create_coin
            (filter-conditions
              generate-puzzle-hash
              rest_of_conditions
              found_first_create_coin
              ; subtract amount from create coin condition if we have additional create coin conditions
              (- delta_amount (f (r condition_rest)))
              (c (f conditions) filtered_conditions)
            )
            (filter-conditions
              generate-puzzle-hash
              rest_of_conditions
              condition_rest ; first create coin condition
              0 ;(+ delta_amount (f (r condition_rest))) ; passed in delta amount, in case there's a deposit, this is > 0
              ; skip this condition so we can add it later
              filtered_conditions
            )
          )
          (if (= condition_code REMARK)
            ; skip REMARK conditions since we use them to generate reveals
            (filter-conditions
              generate-puzzle-hash
              rest_of_conditions
              found_first_create_coin
              delta_amount
              filtered_conditions
            )
            (filter-conditions
              generate-puzzle-hash
              rest_of_conditions
              found_first_create_coin
              delta_amount
              (c (f conditions) filtered_conditions)
            )
          )
        )
      )
      (assert found_first_create_coin
        (list found_first_create_coin delta_amount filtered_conditions)
      )
    )
  )

  (defun calculate-interests (discounted_deposit principal cumulative_interest_rate)
    (assign
      value (- (/ (* discounted_deposit cumulative_interest_rate) PRECISION) principal)
      (if (> value -1)
        value
        0
      )
    )
  )

  (assign
    generate-puzzle-hash (lambda ((& MOD_HASH CAT_MOD_HASH CAT_TAIL_HASH STATUTES_STRUCT P2_TREASURY_HASH)
                                     discounted_deposit inner_puzzle_hash)
      ; only inner puzzle
      (curry_hashes MOD_HASH ; puzzle hash
        (sha256tree MOD_HASH)
        (sha256tree P2_TREASURY_HASH)
        (sha256tree CAT_MOD_HASH)
        (sha256tree CAT_TAIL_HASH)
        (sha256tree STATUTES_STRUCT)
        (sha256tree discounted_deposit)
        inner_puzzle_hash
      )
    )
    statutes_puzzle_hash (calculate-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
    (create_coin_body withdraw_amount conditions) (filter-conditions
      generate-puzzle-hash
      (a INNER_PUZZLE inner_solution)
      0 ; found first coin
      0 ; delta amount
      ()
    )
    interests_amount (if treasury_coin_info
      (calculate-interests DISCOUNTED_DEPOSIT current_amount cumulative_interest_rate)
      0
    )
    new_amount (f (r create_coin_body))
    delta_amount (- new_amount current_amount)
    new_discounted_deposit (if treasury_coin_info
      ; discount with interests
      (+ (/ (* (- delta_amount interests_amount) PRECISION) cumulative_interest_rate) DISCOUNTED_DEPOSIT)
      (+ (/ (* delta_amount PRECISION) cumulative_interest_rate) DISCOUNTED_DEPOSIT)
    )

    treasury_coin_id (if treasury_coin_info
      (calculate-coin-id
        treasury_coin_parent_id
        (curry_hashes CAT_MOD_HASH
          (sha256tree CAT_MOD_HASH)
          (sha256tree CAT_TAIL_HASH)
          (curry_hashes P2_TREASURY_HASH
            (sha256tree P2_TREASURY_HASH)
            (sha256tree CAT_MOD_HASH)
            (sha256tree CAT_TAIL_HASH)
            (sha256tree STATUTES_STRUCT)
            (sha256tree treasury_coin_prev_launcher_id)
            (sha256tree treasury_coin_launcher_id)
          )
        )
        treasury_coin_amount)
      ()
    )
    new_treasury_amount (if treasury_coin_id (- treasury_coin_amount interests_amount) 0)
    final_conditions (if lineage_proof
      ; lineage_proof -> (parent_id, amount, discounted_deposit, inner_puzzle_hash)
      (c
        (list ASSERT_MY_PARENT_ID
          (calculate-coin-id
            (f lineage_proof)
            (curry_hashes CAT_MOD_HASH
              (sha256tree CAT_MOD_HASH)
              (sha256tree CAT_TAIL_HASH)
              (curry_hashes MOD_HASH
                (sha256tree MOD_HASH)
                (sha256tree P2_TREASURY_HASH)
                (sha256tree CAT_MOD_HASH)
                (sha256tree CAT_TAIL_HASH)
                (sha256tree STATUTES_STRUCT)
                (sha256tree (f (r (r lineage_proof)))) ; discounted deposit
                (f (r (r (r lineage_proof)))) ; inner puzzle hash
              )
            )
            (f (r lineage_proof)) ; amount
          )
        )
        conditions
      )
      ; this is a launch, verify we're starting with zero amounts
      (c
        (list ASSERT_MY_PUZZLEHASH
          (curry_hashes CAT_MOD_HASH
            (sha256tree CAT_MOD_HASH)
            (sha256tree CAT_TAIL_HASH)
            (curry_hashes MOD_HASH
              (sha256tree MOD_HASH)
              (sha256tree P2_TREASURY_HASH)
              (sha256tree CAT_MOD_HASH)
              (sha256tree CAT_TAIL_HASH)
              (sha256tree STATUTES_STRUCT)
              (sha256tree 0)
              (sha256tree INNER_PUZZLE)
            )
          )
        )
        (assert (= current_amount 0) ; current amount must be 0 when launching
          conditions
        )
      )
    )
    ; TODO: there should be minimum amount to withdraw to avoid dust on treasury coins (e.g. 10 BYC)
    (c (list REMARK new_discounted_deposit new_amount (f create_coin_body) (r (r create_coin_body)))
      (c (list ASSERT_MY_COIN_ID my_coin_id)
        (c (list ASSERT_MY_AMOUNT current_amount)
          (c
            (c CREATE_COIN ; constructing CREATE_COIN so we can prepend to whatever memos we got
              (c
                (a generate-puzzle-hash
                  (list
                    new_discounted_deposit
                    ; puzzle hash provided in the solution
                    (f create_coin_body)
                  )
                )
                (c new_amount
                  (r (r create_coin_body)) ; memos
                )
              )
            )
            (if (all (> interests_amount 0) treasury_coin_id)
              (assert
                (> new_treasury_amount 0)
                  (c (assert-statute statutes_puzzle_hash STATUTE_CUMULATIVE_INTEREST_RATE cumulative_interest_rate)
                    (c
                      (list CREATE_COIN_ANNOUNCEMENT
                        (concat ANN_PREFIX treasury_coin_id (* -1 interests_amount) new_treasury_amount)
                      )
                      (c
                        (list ASSERT_COIN_ANNOUNCEMENT
                          (sha256
                            treasury_coin_id
                            TREASURY_ANN_PREFIX
                            my_coin_id
                            (* -1 interests_amount)
                            new_treasury_amount
                          )
                        )
                        final_conditions
                      )
                    )
                  )
              )
              ; return conditions as in, we assume driver is handling withdrawals and announcements properly
              final_conditions
            )
          )
        )
      )
    )
  )
)