(mod (
      CAT_MOD_HASH BYC_TAIL_MOD_HASH
      MOD_HASH
      STATUTES_STRUCT LAUNCHER_ID RING_PREV_LAUNCHER_ID
      lineage_proof statutes_inner_puzzle_hash current_amount
      input_conditions . args)

  (include *standard-cl-23.1*)
  (include curry.clib)
  (include condition_codes.clib)
  (include condition_filtering.clib)
  (include statutes_utils.clib)
  (include utils.clib)

  ; anything that isn't a protocol condition is allowed
  (defun filter-conditions ((@ conditions ((condition_code . condition_body) . rest_of_conditions)) filtered_conditions)
    (if conditions
      (if (= condition_code REMARK)
        (assert
          (is-valid-rmk-cond condition_body)
          (filter-conditions rest_of_conditions (c (f conditions) filtered_conditions))
        )
        (if (any (= condition_code SEND_MESSAGE) (= condition_code RECEIVE_MESSAGE))
          (assert
            (is-valid-msg-cond condition_body)
            (filter-conditions rest_of_conditions (c (f conditions) filtered_conditions))
          )
          (if (any (= condition_code CREATE_COIN_ANNOUNCEMENT) (= condition_code CREATE_PUZZLE_ANNOUNCEMENT))
            (assert
              (is-valid-ann-cond condition_body)
              (filter-conditions rest_of_conditions (c (f conditions) filtered_conditions))
            )
            ; all other conditions allowed
            (filter-conditions rest_of_conditions (c (f conditions) filtered_conditions))
          )
        )
      )
      filtered_conditions
    )
  )

  (defun parse-conditions (input_conditions my_puzzle_hash my_create_coin_exists return_conditions new_amount withdraw_amount)
    (if (l input_conditions)
      (assign
        (condition_code condition_body . rest_condition) (f input_conditions)
        (if (= condition_code CREATE_COIN)
          (if condition_body
            (if (= condition_body my_puzzle_hash)
              ; if it's paying into our puzzle hash, increase the sum (they're depositing)
              (if my_create_coin_exists
                ; can't pay into our own puzzle hash twice
                (x)
                (parse-conditions (r input_conditions) my_puzzle_hash ONE (c (f input_conditions) return_conditions) (+ new_amount (f rest_condition)) withdraw_amount)
              )
              ; if it's paying into a different puzzle hash, decrease the sum (they're withdrawing)
              (parse-conditions (r input_conditions) my_puzzle_hash my_create_coin_exists (c (f input_conditions) return_conditions) new_amount (+ withdraw_amount (f rest_condition)))
            )
            (parse-conditions (r input_conditions) my_puzzle_hash my_create_coin_exists (c (f input_conditions) return_conditions) new_amount withdraw_amount)
          )
          (parse-conditions (r input_conditions) my_puzzle_hash my_create_coin_exists (c (f input_conditions) return_conditions) new_amount withdraw_amount)
        )
      )
      ; all done, return sum and enforce our create coin condition
      (assert
        my_create_coin_exists
        (list new_amount withdraw_amount return_conditions)
      )
    )
  )

  (defun-inline generate-puzzle-hash (MOD_HASH CAT_MOD_HASH byc_tail_hash statutes_struct_hash
                                     RING_PREV_LAUNCHER_ID LAUNCHER_ID prev_launcher_id launcher_id)

    (curry_hashes CAT_MOD_HASH
      (sha256 ONE CAT_MOD_HASH)
      (sha256 ONE byc_tail_hash)
      (curry_hashes MOD_HASH ; puzzle hash
        (sha256 ONE MOD_HASH)
        ;(sha256 ONE CAT_MOD_HASH)
        ;(sha256 ONE BYC_TAIL_HASH)
        statutes_struct_hash
        (if launcher_id
          (sha256 ONE launcher_id)
          (sha256 ONE LAUNCHER_ID)
        )
        (if prev_launcher_id
          (sha256 ONE prev_launcher_id)
          (sha256 ONE RING_PREV_LAUNCHER_ID)
        )
      )
    )
  )

  (assign
    filtered_conditions (filter-conditions input_conditions ())
    statutes_puzzle_hash (calculate-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
    statutes_struct_hash (sha256tree STATUTES_STRUCT)
    byc_tail_hash (curry_hashes BYC_TAIL_MOD_HASH statutes_struct_hash)
    ; 1. we're withdrawing/depositing/announcing, lineage proof is parent_id of parent coin and amount, we need to assert
    ;    that assert_parent_id is `(parent_id . previous_amount)`
    ; 2. we're changing lineage, lineage proof is `(parent_id . prev_launcher_id)` and
    ;    asserts announcement from statutes vote
    (my_puzzle_hash parent_id) (if (size_b32 (r lineage_proof))
      ; we're changing lineage
      (list
        (curry_hashes MOD_HASH ; inner puzzle hash
          (sha256 ONE MOD_HASH)
          ;(sha256 ONE CAT_MOD_HASH)
          ;(sha256 ONE byc_tail_hash)
          statutes_struct_hash
          ; we can only change ring formation
          (sha256 ONE LAUNCHER_ID)
          (sha256 ONE (r lineage_proof))
        )
        (if (= (f lineage_proof) LAUNCHER_ID)
          ; this is initial launch, assert launcher coin
          LAUNCHER_ID
          ; not launch, just update, assert previous coin spend
          (calculate-coin-id
            (f lineage_proof) ; parent id
            (generate-puzzle-hash MOD_HASH CAT_MOD_HASH byc_tail_hash statutes_struct_hash
                                  RING_PREV_LAUNCHER_ID LAUNCHER_ID () ())
            ; current amount must not change when updating lineage, ie needs to be same as parent coin
            current_amount ; parent amount
          )
        )
      )
      ; we're spending/announcing
      (list
        (curry_hashes MOD_HASH ; inner puzzle hash
          (sha256 ONE MOD_HASH)
          ;(sha256 ONE CAT_MOD_HASH)
          ;(sha256 ONE byc_tail_hash)
          statutes_struct_hash
          (sha256 ONE LAUNCHER_ID)
          (sha256 ONE RING_PREV_LAUNCHER_ID)
        )
        ; this ensures that we're keeping lineage the same
        (calculate-coin-id
          (f lineage_proof)
          (generate-puzzle-hash MOD_HASH CAT_MOD_HASH byc_tail_hash statutes_struct_hash
                                RING_PREV_LAUNCHER_ID LAUNCHER_ID () ())
          ; pass through previous amount
          (r lineage_proof)
        )
      )
    )
    (new_amount withdraw_amount_pre conditions) (parse-conditions
      filtered_conditions
      my_puzzle_hash
      0 ; create coin exists = false
      () ; return_conditions
      0 ; init new_amount = 0
      0 ; init withdraw_amount = 0
    )
    withdraw_amount (
      if (> current_amount new_amount)
        (if (= 0 withdraw_amount_pre)
          ; there's a delta but no create coin wants to capture the amount, must be a melt
          (- current_amount new_amount)
          ; withdraw is set, use that
          (if (> withdraw_amount_pre 0)
            withdraw_amount_pre
            (x)
          )
        )
        withdraw_amount_pre
    )
    (assert
     ; can't go into negative
     (> new_amount MINUS_ONE) (> withdraw_amount MINUS_ONE)
     ; no change allowed
     ;(> (+ new_amount withdraw_amount) (- current_amount 1))
     (any
      ; we can't leave any change if withdrawing
      (= current_amount (+ new_amount withdraw_amount))
      ; or if depositing must be higher than previous value
      (all (= withdraw_amount 0) (> new_amount current_amount))
     )
     ; we can't do both a withdrawal and a deposit at the same time
     (not (all (> withdraw_amount 0) (> new_amount current_amount)))
     ; must have at least one condition
     (l conditions)
     ; ---- all asserts passed, return conditions
      (c
        (list ASSERT_MY_AMOUNT current_amount)
        (c (list
          ASSERT_MY_PARENT_ID parent_id)
          (if (all (size_b32 (r lineage_proof)) (= withdraw_amount 0))
            ; updating lineage, don't require approval mods
            ; there is initial launch and later update of the ring
            (assert
              (size_b32 (r lineage_proof))
              (c
                ; get approval from statutes
                (list RECEIVE_MESSAGE 0x12
                  (concat
                    PROTOCOL_PREFIX
                    CUSTOM_CONDITION_PREFIX
                    (sha256tree
                      (c LAUNCHER_ID
                        (r lineage_proof) ; ring prev launcher id
                      )
                    )
                  )
                  statutes_puzzle_hash
                )
                conditions
              )
            )
            ; ELSE we're spending/announcing, require approval mods
            (assign
              (
                approver_parent_id
                approver_mod_hash
                approver_mod_curried_args_hash
                approver_amount
                approval_mod_hashes
              ) args
              approver_coin_id (assert
                (size_b32 approver_parent_id)
                (size_b32 approver_mod_hash)
                (size_uint64 approver_amount)
                ; check that this approver mod hash is allowed
                (contains approval_mod_hashes approver_mod_hash)
                (calculate-coin-id
                  approver_parent_id
                  ; we want to ensure that the approver puzzle is using the correct mod
                  (if (l approver_mod_curried_args_hash)
                    ; this puzzle is wrapped inside a CAT puzzle, it'll provide a tail too
                    (assert
                      (= (f approver_mod_curried_args_hash) CAT_MOD_HASH)
                      (size_b32 (f (r (r approver_mod_curried_args_hash))))
                      (size_b32 (f (r approver_mod_curried_args_hash)))
                      (curry_hashes CAT_MOD_HASH
                        (sha256 ONE CAT_MOD_HASH)
                        (sha256 ONE (f (r approver_mod_curried_args_hash)))
                        (tree_hash_of_apply approver_mod_hash (f (r (r approver_mod_curried_args_hash))))
                      )
                    )
                    ; ELSE puzzle is not wrapped
                    (assert (size_b32 approver_mod_curried_args_hash)
                      (tree_hash_of_apply approver_mod_hash approver_mod_curried_args_hash)
                    )
                  )
                  approver_amount
                )
              )

              (c
                ; assert approver coin announcement is valid
                (list RECEIVE_MESSAGE 0x3f
                  (concat
                    PROTOCOL_PREFIX
                    (sha256tree (c (- new_amount current_amount) new_amount))
                  )
                  approver_coin_id
                )
                ; assert that approval mod hashes are valid
                (c (assert-statute statutes_puzzle_hash STATUTE_APPROVAL_MOD_HASHES_HASH (sha256tree approval_mod_hashes))
                  (c
                    ;  my new balance so someone can check whole ring balance
                    (list CREATE_COIN_ANNOUNCEMENT
                      (concat
                        PROTOCOL_PREFIX
                        (sha256tree (c new_amount LAUNCHER_ID))
                      )
                    )
                    (c (list REMARK PROTOCOL_PREFIX new_amount LAUNCHER_ID) ; for driver code
                      conditions
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)
